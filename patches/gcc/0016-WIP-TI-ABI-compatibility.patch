From bc3794b9ef1335b84c5aa628d4cc37e7c596e1f4 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dimitar@dinux.eu>
Date: Mon, 17 Apr 2017 17:39:42 +0300
Subject: [PATCH 16/16] WIP: TI ABI compatibility

This is an ongoing work on reworking the GCC PRU port to be
compatible with the TI ABI.

WARNING: This patch is not usable! Please use the stable branch.

TODO:
  - Add QI/HI/SI constraints for inline assembly.
  - Add tests for ABI compatibility with TI's toolchain.
  - Cleanup the code.
  - Run the GCC testsuite.
  - 48-bit argument (packed struct) - reg or stack?
  - Revisit the AP pointer reg.

Signed-off-by: Dimitar Dimitrov <dimitar@dinux.eu>
---
 gcc/config/pru/alu-zext.md                         |  192 +-
 gcc/config/pru/alu-zext.template.md                |   48 +-
 gcc/config/pru/constraints.md                      |    6 +
 gcc/config/pru/predicates.md                       |    8 +-
 gcc/config/pru/pru-ldst-multiple.md                | 3192 ++++++++++----------
 gcc/config/pru/pru-ldst-multiple.ml                |   22 +-
 gcc/config/pru/pru-modes.def                       |   10 -
 gcc/config/pru/pru-protos.h                        |    1 +
 gcc/config/pru/pru.c                               |  610 +++-
 gcc/config/pru/pru.h                               |  293 +-
 gcc/config/pru/pru.md                              |  296 +-
 gcc/testsuite/gcc.target/pru/ashiftrt.c            |   13 +
 gcc/testsuite/gcc.target/pru/pragma-ctable_entry.c |    6 +-
 gcc/testsuite/gcc.target/pru/qbbc-3.c              |   15 +
 .../gcc.target/pru/zero_extend-and-hisi.c          |    2 +-
 .../gcc.target/pru/zero_extend-and-qihi.c          |    2 +-
 .../gcc.target/pru/zero_extend-and-qisi.c          |    2 +-
 gcc/testsuite/gcc.target/pru/zero_extend-qihi.c    |   10 +-
 18 files changed, 2636 insertions(+), 2092 deletions(-)
 create mode 100644 gcc/testsuite/gcc.target/pru/ashiftrt.c
 create mode 100644 gcc/testsuite/gcc.target/pru/qbbc-3.c

diff --git a/gcc/config/pru/alu-zext.md b/gcc/config/pru/alu-zext.md
index d259f80a983..56707c2ceb2 100644
--- a/gcc/config/pru/alu-zext.md
+++ b/gcc/config/pru/alu-zext.md
@@ -38,10 +38,11 @@
 	 ))]
   ""
   "@
-   add\\t%x0, %x1, %x2
-   add\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %n2"
-  [(set_attr "type" "alu")])
+   add\\t%0, %1, %2
+   add\\t%0, %1, %2
+   sub\\t%0, %1, %n2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "sub_impl<EQD:mode>_<EQS0:mode><EQS1:mode>"
   [(set (match_operand:EQD 0 "register_operand" "=r,r,r")
@@ -54,10 +55,11 @@
 	 ))]
   ""
   "@
-   sub\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %x2
-   rsb\\t%x0, %x2, %x1"
-  [(set_attr "type" "alu")])
+   sub\\t%0, %1, %2
+   sub\\t%0, %1, %2
+   rsb\\t%0, %2, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "neg_impl<EQD:mode>_<EQS0:mode>_dummy"
@@ -67,8 +69,9 @@
 	  (match_operand:EQS0 1 "register_operand" "r")
 	 )))]
   ""
-  "rsb\\t%x0, %x1, 0"
-  [(set_attr "type" "alu")])
+  "rsb\\t%0, %1, 0"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "one_cmpl_impl<EQD:mode>_<EQS0:mode>_dummy"
@@ -78,8 +81,9 @@
 	  (match_operand:EQS0 1 "register_operand" "r")
 	 )))]
   ""
-  "not\\t%x0, %x1"
-  [(set_attr "type" "alu")])
+  "not\\t%0, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Specialized IOR/AND patterns for matching setbit/clearbit instructions.
 ;
@@ -93,8 +97,9 @@
 	 )
 	  (match_operand:EQD 2 "single_zero_operand" "n")))]
   ""
-  "clr\\t%x0, %x1, %V2"
-  [(set_attr "type" "alu")])
+  "clr\\t%0, %1, %V2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "setbit_<EQD:mode>_<EQS0:mode>_dummy"
   [(set (match_operand:EQD 0 "register_operand"			"=r")
@@ -104,8 +109,9 @@
 	 )
 	  (match_operand:EQD 2 "single_one_operand" "n")))]
   ""
-  "set\\t%x0, %x1, %T2"
-  [(set_attr "type" "alu")])
+  "set\\t%0, %1, %T2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Regular ALU ops
 (define_insn "<code>_impl<EQD:mode>_<EQS0:mode><EQS1:mode>"
@@ -118,8 +124,9 @@
 	  (match_operand:EQS1 2 "reg_or_ubyte_operand"  "rI"))
 	 ))]
   ""
-  "<logical_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "alu")])
+  "<logical_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Shift ALU ops
 (define_insn "<shift_op>_impl<EQD:mode>_<EQS0:mode><EQS1:mode>"
@@ -132,8 +139,9 @@
 	  (match_operand:EQS1 2 "shift_operand"    "rL"))
 	 ))]
   ""
-  "<shift_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "shift")])
+  "<shift_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 ;; ALU operations with zero extensions
 ;;
 ;; <ZOP0@Operand0:SI@Operand0:Zero-extended>
@@ -171,10 +179,11 @@
 	 )]
   ""
   "@
-   add\\t%x0, %x1, %x2
-   add\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %n2"
-  [(set_attr "type" "alu")])
+   add\\t%0, %1, %2
+   add\\t%0, %1, %2
+   sub\\t%0, %1, %n2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "sub_impl<EQD:mode>_<EQS0:mode>eqd"
   [(set (match_operand:EQD 0 "register_operand" "=r,r,r")
@@ -187,10 +196,11 @@
 	 )]
   ""
   "@
-   sub\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %x2
-   rsb\\t%x0, %x2, %x1"
-  [(set_attr "type" "alu")])
+   sub\\t%0, %1, %2
+   sub\\t%0, %1, %2
+   rsb\\t%0, %2, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "neg_impl<EQD:mode>_<EQS0:mode>eqd"
@@ -200,8 +210,9 @@
 	  (match_operand:EQS0 1 "register_operand" "r")
 	 )))]
   ""
-  "rsb\\t%x0, %x1, 0"
-  [(set_attr "type" "alu")])
+  "rsb\\t%0, %1, 0"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "one_cmpl_impl<EQD:mode>_<EQS0:mode>eqd"
@@ -211,8 +222,9 @@
 	  (match_operand:EQS0 1 "register_operand" "r")
 	 )))]
   ""
-  "not\\t%x0, %x1"
-  [(set_attr "type" "alu")])
+  "not\\t%0, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Specialized IOR/AND patterns for matching setbit/clearbit instructions.
 ;
@@ -226,8 +238,9 @@
 	 )
 	  (match_operand:EQD 2 "single_zero_operand" "n")))]
   ""
-  "clr\\t%x0, %x1, %V2"
-  [(set_attr "type" "alu")])
+  "clr\\t%0, %1, %V2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "setbit_<EQD:mode>_<EQS0:mode>eqd"
   [(set (match_operand:EQD 0 "register_operand"			"=r")
@@ -237,8 +250,9 @@
 	 )
 	  (match_operand:EQD 2 "single_one_operand" "n")))]
   ""
-  "set\\t%x0, %x1, %T2"
-  [(set_attr "type" "alu")])
+  "set\\t%0, %1, %T2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Regular ALU ops
 (define_insn "<code>_impl<EQD:mode>_<EQS0:mode>eqd"
@@ -251,8 +265,9 @@
 	  (match_operand:EQD 2 "reg_or_ubyte_operand"  "rI"))
 	 )]
   ""
-  "<logical_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "alu")])
+  "<logical_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Shift ALU ops
 (define_insn "<shift_op>_impl<EQD:mode>_<EQS0:mode>eqd"
@@ -265,8 +280,9 @@
 	  (match_operand:EQD 2 "shift_operand"    "rL"))
 	 )]
   ""
-  "<shift_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "shift")])
+  "<shift_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 ;; ALU operations with zero extensions
 ;;
 ;; <ZOP0@Operand0:SI@Operand0:Zero-extended>
@@ -304,10 +320,11 @@
 	 ))]
   ""
   "@
-   add\\t%x0, %x1, %x2
-   add\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %n2"
-  [(set_attr "type" "alu")])
+   add\\t%0, %1, %2
+   add\\t%0, %1, %2
+   sub\\t%0, %1, %n2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "sub_impl<EQD:mode>_eqd<EQS1:mode>"
   [(set (match_operand:EQD 0 "register_operand" "=r,r,r")
@@ -320,10 +337,11 @@
 	 ))]
   ""
   "@
-   sub\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %x2
-   rsb\\t%x0, %x2, %x1"
-  [(set_attr "type" "alu")])
+   sub\\t%0, %1, %2
+   sub\\t%0, %1, %2
+   rsb\\t%0, %2, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "neg_impl<EQD:mode>_eqd_dummy"
@@ -333,8 +351,9 @@
 	  (match_operand:EQD 1 "register_operand" "r")
 	 ))]
   ""
-  "rsb\\t%x0, %x1, 0"
-  [(set_attr "type" "alu")])
+  "rsb\\t%0, %1, 0"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "one_cmpl_impl<EQD:mode>_eqd_dummy"
@@ -344,8 +363,9 @@
 	  (match_operand:EQD 1 "register_operand" "r")
 	 ))]
   ""
-  "not\\t%x0, %x1"
-  [(set_attr "type" "alu")])
+  "not\\t%0, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Specialized IOR/AND patterns for matching setbit/clearbit instructions.
 ;
@@ -359,8 +379,9 @@
 	 
 	  (match_operand:EQD 2 "single_zero_operand" "n")))]
   ""
-  "clr\\t%x0, %x1, %V2"
-  [(set_attr "type" "alu")])
+  "clr\\t%0, %1, %V2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "setbit_<EQD:mode>_eqd_dummy"
   [(set (match_operand:EQD 0 "register_operand"			"=r")
@@ -370,8 +391,9 @@
 	 
 	  (match_operand:EQD 2 "single_one_operand" "n")))]
   ""
-  "set\\t%x0, %x1, %T2"
-  [(set_attr "type" "alu")])
+  "set\\t%0, %1, %T2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Regular ALU ops
 (define_insn "<code>_impl<EQD:mode>_eqd<EQS1:mode>"
@@ -384,8 +406,9 @@
 	  (match_operand:EQS1 2 "reg_or_ubyte_operand"  "rI"))
 	 ))]
   ""
-  "<logical_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "alu")])
+  "<logical_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Shift ALU ops
 (define_insn "<shift_op>_impl<EQD:mode>_eqd<EQS1:mode>"
@@ -398,8 +421,9 @@
 	  (match_operand:EQS1 2 "shift_operand"    "rL"))
 	 ))]
   ""
-  "<shift_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "shift")])
+  "<shift_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 ;; ALU operations with zero extensions
 ;;
 ;; <ZOP0@Operand0:SI@Operand0:Zero-extended>
@@ -437,10 +461,11 @@
 	 )]
   ""
   "@
-   add\\t%x0, %x1, %x2
-   add\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %n2"
-  [(set_attr "type" "alu")])
+   add\\t%0, %1, %2
+   add\\t%0, %1, %2
+   sub\\t%0, %1, %n2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "sub_impl<EQD:mode>_eqdeqd"
   [(set (match_operand:EQD 0 "register_operand" "=r,r,r")
@@ -453,10 +478,11 @@
 	 )]
   ""
   "@
-   sub\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %x2
-   rsb\\t%x0, %x2, %x1"
-  [(set_attr "type" "alu")])
+   sub\\t%0, %1, %2
+   sub\\t%0, %1, %2
+   rsb\\t%0, %2, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "neg_impl<EQD:mode>_eqdeqd"
@@ -466,8 +492,9 @@
 	  (match_operand:EQD 1 "register_operand" "r")
 	 ))]
   ""
-  "rsb\\t%x0, %x1, 0"
-  [(set_attr "type" "alu")])
+  "rsb\\t%0, %1, 0"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "one_cmpl_impl<EQD:mode>_eqdeqd"
@@ -477,8 +504,9 @@
 	  (match_operand:EQD 1 "register_operand" "r")
 	 ))]
   ""
-  "not\\t%x0, %x1"
-  [(set_attr "type" "alu")])
+  "not\\t%0, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Specialized IOR/AND patterns for matching setbit/clearbit instructions.
 ;
@@ -492,8 +520,9 @@
 	 
 	  (match_operand:EQD 2 "single_zero_operand" "n")))]
   ""
-  "clr\\t%x0, %x1, %V2"
-  [(set_attr "type" "alu")])
+  "clr\\t%0, %1, %V2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "setbit_<EQD:mode>_eqdeqd"
   [(set (match_operand:EQD 0 "register_operand"			"=r")
@@ -503,8 +532,9 @@
 	 
 	  (match_operand:EQD 2 "single_one_operand" "n")))]
   ""
-  "set\\t%x0, %x1, %T2"
-  [(set_attr "type" "alu")])
+  "set\\t%0, %1, %T2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Regular ALU ops
 (define_insn "<code>_impl<EQD:mode>_eqdeqd"
@@ -517,8 +547,9 @@
 	  (match_operand:EQD 2 "reg_or_ubyte_operand"  "rI"))
 	 )]
   ""
-  "<logical_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "alu")])
+  "<logical_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Shift ALU ops
 (define_insn "<shift_op>_impl<EQD:mode>_eqdeqd"
@@ -531,5 +562,6 @@
 	  (match_operand:EQD 2 "shift_operand"    "rL"))
 	 )]
   ""
-  "<shift_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "shift")])
+  "<shift_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
diff --git a/gcc/config/pru/alu-zext.template.md b/gcc/config/pru/alu-zext.template.md
index f5f4effddb5..45614645345 100644
--- a/gcc/config/pru/alu-zext.template.md
+++ b/gcc/config/pru/alu-zext.template.md
@@ -35,10 +35,11 @@
 	 {ZOP1@@)})]
   ""
   "@
-   add\\t%x0, %x1, %x2
-   add\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %n2"
-  [(set_attr "type" "alu")])
+   add\\t%0, %1, %2
+   add\\t%0, %1, %2
+   sub\\t%0, %1, %n2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "sub_impl<EQD:mode>_{ZOP0@eqd@<EQS0:mode>}{ZOP1@eqd@<EQS1:mode>}"
   [(set (match_operand:EQD 0 "register_operand" "=r,r,r")
@@ -51,10 +52,11 @@
 	 {ZOP1@@)})]
   ""
   "@
-   sub\\t%x0, %x1, %x2
-   sub\\t%x0, %x1, %x2
-   rsb\\t%x0, %x2, %x1"
-  [(set_attr "type" "alu")])
+   sub\\t%0, %1, %2
+   sub\\t%0, %1, %2
+   rsb\\t%0, %2, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "neg_impl<EQD:mode>_{ZOP0@eqd@<EQS0:mode>}{ZOP1@eqd@_dummy}"
@@ -64,8 +66,9 @@
 	  (match_operand:{ZOP0@EQD@EQS0} 1 "register_operand" "r")
 	 {ZOP0@@)}))]
   ""
-  "rsb\\t%x0, %x1, 0"
-  [(set_attr "type" "alu")])
+  "rsb\\t%0, %1, 0"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 
 (define_insn "one_cmpl_impl<EQD:mode>_{ZOP0@eqd@<EQS0:mode>}{ZOP1@eqd@_dummy}"
@@ -75,8 +78,9 @@
 	  (match_operand:{ZOP0@EQD@EQS0} 1 "register_operand" "r")
 	 {ZOP0@@)}))]
   ""
-  "not\\t%x0, %x1"
-  [(set_attr "type" "alu")])
+  "not\\t%0, %1"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Specialized IOR/AND patterns for matching setbit/clearbit instructions.
 ;
@@ -90,8 +94,9 @@
 	 {ZOP0@@)}
 	  (match_operand:EQD 2 "single_zero_operand" "n")))]
   ""
-  "clr\\t%x0, %x1, %V2"
-  [(set_attr "type" "alu")])
+  "clr\\t%0, %1, %V2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 (define_insn "setbit_<EQD:mode>_{ZOP0@eqd@<EQS0:mode>}{ZOP1@eqd@_dummy}"
   [(set (match_operand:EQD 0 "register_operand"			"=r")
@@ -101,8 +106,9 @@
 	 {ZOP0@@)}
 	  (match_operand:EQD 2 "single_one_operand" "n")))]
   ""
-  "set\\t%x0, %x1, %T2"
-  [(set_attr "type" "alu")])
+  "set\\t%0, %1, %T2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Regular ALU ops
 (define_insn "<code>_impl<EQD:mode>_{ZOP0@eqd@<EQS0:mode>}{ZOP1@eqd@<EQS1:mode>}"
@@ -115,8 +121,9 @@
 	  (match_operand:{ZOP1@EQD@EQS1} 2 "reg_or_ubyte_operand"  "rI"))
 	 {ZOP1@@)})]
   ""
-  "<logical_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "alu")])
+  "<logical_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
 
 ; Shift ALU ops
 (define_insn "<shift_op>_impl<EQD:mode>_{ZOP0@eqd@<EQS0:mode>}{ZOP1@eqd@<EQS1:mode>}"
@@ -129,5 +136,6 @@
 	  (match_operand:{ZOP1@EQD@EQS1} 2 "shift_operand"    "rL"))
 	 {ZOP1@@)})]
   ""
-  "<shift_asm>\\t%x0, %x1, %x2"
-  [(set_attr "type" "shift")])
+  "<shift_asm>\\t%0, %1, %2"
+  [(set_attr "type" "alu")
+   (set_attr "length" "4")])
diff --git a/gcc/config/pru/constraints.md b/gcc/config/pru/constraints.md
index 91d4345ff01..f64bf770197 100644
--- a/gcc/config/pru/constraints.md
+++ b/gcc/config/pru/constraints.md
@@ -24,6 +24,7 @@
 ;;  J: 0 to 65535.
 ;;  L: 0 to 31 (for shift counts).
 ;;  M: -255 to 0 (for converting ADD to SUB with suitable UBYTE OP2).
+;;  N: -32768 to 32767 (16-bit signed integer)
 ;;  P: 1
 ;;  T: Text segment label.  Needed to know when to select %pmem relocation.
 ;;  Z: Constant integer zero.
@@ -67,6 +68,11 @@
   (and (match_code "const_int")
        (match_test "UBYTE_INT (-ival)")))
 
+(define_constraint "N"
+  "A constant in the range [-32768;32767]."
+  (and (match_code "const_int")
+       (match_test "SHWORD_INT (ival)")))
+
 (define_constraint "P"
   "A constant 1."
   (and (match_code "const_int")
diff --git a/gcc/config/pru/predicates.md b/gcc/config/pru/predicates.md
index dde91b7e81d..7ec94e53492 100644
--- a/gcc/config/pru/predicates.md
+++ b/gcc/config/pru/predicates.md
@@ -149,10 +149,10 @@
 
       if (GET_CODE (elt) != SET
 	  || GET_CODE (SET_DEST (elt)) != REG
-	  || GET_MODE (SET_DEST (elt)) != SImode
+	  || GET_MODE (SET_DEST (elt)) != QImode
 	  || REGNO (SET_DEST (elt))    != (unsigned) (dest_regno + i)
 	  || GET_CODE (SET_SRC (elt))  != MEM
-	  || GET_MODE (SET_SRC (elt))  != SImode
+	  || GET_MODE (SET_SRC (elt))  != QImode
 	  || GET_CODE (XEXP (SET_SRC (elt), 0)) != PLUS
 	  || ! rtx_equal_p (XEXP (XEXP (SET_SRC (elt), 0), 0), src_addr)
 	  || GET_CODE (XEXP (XEXP (SET_SRC (elt), 0), 1)) != CONST_INT
@@ -201,10 +201,10 @@
 
       if (GET_CODE (elt) != SET
 	  || GET_CODE (SET_SRC (elt)) != REG
-	  || GET_MODE (SET_SRC (elt)) != SImode
+	  || GET_MODE (SET_SRC (elt)) != QImode
 	  || REGNO (SET_SRC (elt)) != (unsigned) (src_regno + i)
 	  || GET_CODE (SET_DEST (elt)) != MEM
-	  || GET_MODE (SET_DEST (elt)) != SImode
+	  || GET_MODE (SET_DEST (elt)) != QImode
 	  || GET_CODE (XEXP (SET_DEST (elt), 0)) != PLUS
 	  || ! rtx_equal_p (XEXP (XEXP (SET_DEST (elt), 0), 0), dest_addr)
 	  || GET_CODE (XEXP (XEXP (SET_DEST (elt), 0), 1)) != CONST_INT
diff --git a/gcc/config/pru/pru-ldst-multiple.md b/gcc/config/pru/pru-ldst-multiple.md
index 9e843a7cf68..dd8496ace93 100644
--- a/gcc/config/pru/pru-ldst-multiple.md
+++ b/gcc/config/pru/pru-ldst-multiple.md
@@ -24,2775 +24,2775 @@
 
 (define_insn "*lbbo_multiple_1_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 2 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 2 "register_operand" "r")
                            (match_operand:SI 3 "const_ubyte_operand" "I"))))])]
   "XVECLEN (operands[0], 0) == 1"
-  "lbbo\t%1, %2, %3, 4"
+  "lbbo\t%b1, %F2, %3, 1"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_1"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 2 "register_operand" "r")))])]
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 2 "register_operand" "r")))])]
   "XVECLEN (operands[0], 0) == 1"
-  "lbbo\t%1, %2, 0, 4"
+  "lbbo\t%b1, %F2, 0, 1"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_1_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 2 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 2 "register_operand" "r")
                            (match_operand:SI 3 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))])]
+          (match_operand:QI 1 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 1"
-  "sbbo\t%1, %2, %3, 4"
+  "sbbo\t%b1, %F2, %3, 1"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_1"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 2 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))])]
+    [(set (mem:QI (match_operand:SI 2 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 1"
-  "sbbo\t%1, %2, 0, 4"
+  "sbbo\t%b1, %F2, 0, 1"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_2_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 3 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 3 "register_operand" "r")
                            (match_operand:SI 4 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 3)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 3)
                            (match_operand:SI 5 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 2"
-  "lbbo\t%1, %3, %4, 8"
+  "lbbo\t%b1, %F3, %4, 2"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_2"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 3 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 3)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 3 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 3)
                            (match_operand:SI 4 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 2"
-  "lbbo\t%1, %3, 0, 8"
+  "lbbo\t%b1, %F3, 0, 2"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_2_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 3 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 3 "register_operand" "r")
                            (match_operand:SI 4 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 3)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 3)
                            (match_operand:SI 5 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))])]
+          (match_operand:QI 2 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 2"
-  "sbbo\t%1, %3, %4, 8"
+  "sbbo\t%b1, %F3, %4, 2"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_2"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 3 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 3)
+    [(set (mem:QI (match_operand:SI 3 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 3)
                            (match_operand:SI 4 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))])]
+          (match_operand:QI 2 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 2"
-  "sbbo\t%1, %3, 0, 8"
+  "sbbo\t%b1, %F3, 0, 2"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_3_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 4 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 4 "register_operand" "r")
                            (match_operand:SI 5 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 4)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 6 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 4)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 7 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 3"
-  "lbbo\t%1, %4, %5, 12"
+  "lbbo\t%b1, %F4, %5, 3"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_3"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 4 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 4)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 4 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 5 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 4)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 6 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 3"
-  "lbbo\t%1, %4, 0, 12"
+  "lbbo\t%b1, %F4, 0, 3"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_3_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 4 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 4 "register_operand" "r")
                            (match_operand:SI 5 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 4)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 6 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 4)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 7 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))])]
+          (match_operand:QI 3 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 3"
-  "sbbo\t%1, %4, %5, 12"
+  "sbbo\t%b1, %F4, %5, 3"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_3"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 4 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 4)
+    [(set (mem:QI (match_operand:SI 4 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 5 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 4)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 4)
                            (match_operand:SI 6 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))])]
+          (match_operand:QI 3 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 3"
-  "sbbo\t%1, %4, 0, 12"
+  "sbbo\t%b1, %F4, 0, 3"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_4_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 5 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 5 "register_operand" "r")
                            (match_operand:SI 6 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 5)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 7 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 5)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 8 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 5)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 9 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 4"
-  "lbbo\t%1, %5, %6, 16"
+  "lbbo\t%b1, %F5, %6, 4"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_4"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 5 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 5)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 5 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 6 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 5)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 7 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 5)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 8 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 4"
-  "lbbo\t%1, %5, 0, 16"
+  "lbbo\t%b1, %F5, 0, 4"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_4_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 5 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 5 "register_operand" "r")
                            (match_operand:SI 6 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 5)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 7 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 5)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 8 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 5)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 9 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))])]
+          (match_operand:QI 4 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 4"
-  "sbbo\t%1, %5, %6, 16"
+  "sbbo\t%b1, %F5, %6, 4"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_4"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 5 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 5)
+    [(set (mem:QI (match_operand:SI 5 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 6 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 5)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 7 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 5)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 5)
                            (match_operand:SI 8 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))])]
+          (match_operand:QI 4 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 4"
-  "sbbo\t%1, %5, 0, 16"
+  "sbbo\t%b1, %F5, 0, 4"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_5_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 6 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 6 "register_operand" "r")
                            (match_operand:SI 7 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 8 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 9 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 10 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 11 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 5"
-  "lbbo\t%1, %6, %7, 20"
+  "lbbo\t%b1, %F6, %7, 5"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_5"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 6 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 6 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 7 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 8 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 9 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 6)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 10 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 5"
-  "lbbo\t%1, %6, 0, 20"
+  "lbbo\t%b1, %F6, 0, 5"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_5_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 6 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 6 "register_operand" "r")
                            (match_operand:SI 7 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 8 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 9 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 10 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))])]
+          (match_operand:QI 5 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 5"
-  "sbbo\t%1, %6, %7, 20"
+  "sbbo\t%b1, %F6, %7, 5"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_5"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 6 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+    [(set (mem:QI (match_operand:SI 6 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 7 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 8 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 9 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 6)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 6)
                            (match_operand:SI 10 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))])]
+          (match_operand:QI 5 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 5"
-  "sbbo\t%1, %6, 0, 20"
+  "sbbo\t%b1, %F6, 0, 5"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_6_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 7 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 7 "register_operand" "r")
                            (match_operand:SI 8 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 9 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 10 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 11 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 13 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 6"
-  "lbbo\t%1, %7, %8, 24"
+  "lbbo\t%b1, %F7, %8, 6"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_6"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 7 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 7 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 8 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 9 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 10 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 11 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 7)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 12 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 6"
-  "lbbo\t%1, %7, 0, 24"
+  "lbbo\t%b1, %F7, 0, 6"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_6_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 7 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 7 "register_operand" "r")
                            (match_operand:SI 8 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 9 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 10 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))])]
+          (match_operand:QI 6 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 6"
-  "sbbo\t%1, %7, %8, 24"
+  "sbbo\t%b1, %F7, %8, 6"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_6"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 7 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+    [(set (mem:QI (match_operand:SI 7 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 8 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 9 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 10 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 7)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 7)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))])]
+          (match_operand:QI 6 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 6"
-  "sbbo\t%1, %7, 0, 24"
+  "sbbo\t%b1, %F7, 0, 6"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_7_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 8 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 8 "register_operand" "r")
                            (match_operand:SI 9 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 10 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 11 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 15 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 7"
-  "lbbo\t%1, %8, %9, 28"
+  "lbbo\t%b1, %F8, %9, 7"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_7"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 8 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 8 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 9 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 10 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 11 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 8)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 14 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 7"
-  "lbbo\t%1, %8, 0, 28"
+  "lbbo\t%b1, %F8, 0, 7"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_7_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 8 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 8 "register_operand" "r")
                            (match_operand:SI 9 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 10 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))])]
+          (match_operand:QI 7 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 7"
-  "sbbo\t%1, %8, %9, 28"
+  "sbbo\t%b1, %F8, %9, 7"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_7"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 8 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+    [(set (mem:QI (match_operand:SI 8 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 9 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 10 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 8)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 8)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))])]
+          (match_operand:QI 7 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 7"
-  "sbbo\t%1, %8, 0, 28"
+  "sbbo\t%b1, %F8, 0, 7"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_8_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 9 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 9 "register_operand" "r")
                            (match_operand:SI 10 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 11 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 17 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 8"
-  "lbbo\t%1, %9, %10, 32"
+  "lbbo\t%b1, %F9, %10, 8"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_8"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 9 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 9 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 10 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 11 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 9)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 16 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 8"
-  "lbbo\t%1, %9, 0, 32"
+  "lbbo\t%b1, %F9, 0, 8"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_8_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 9 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 9 "register_operand" "r")
                            (match_operand:SI 10 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))])]
+          (match_operand:QI 8 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 8"
-  "sbbo\t%1, %9, %10, 32"
+  "sbbo\t%b1, %F9, %10, 8"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_8"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 9 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+    [(set (mem:QI (match_operand:SI 9 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 10 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 9)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 9)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))])]
+          (match_operand:QI 8 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 8"
-  "sbbo\t%1, %9, 0, 32"
+  "sbbo\t%b1, %F9, 0, 8"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_9_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 10 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 10 "register_operand" "r")
                            (match_operand:SI 11 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 19 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 9"
-  "lbbo\t%1, %10, %11, 36"
+  "lbbo\t%b1, %F10, %11, 9"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_9"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 10 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 10 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 11 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 10)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 18 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 9"
-  "lbbo\t%1, %10, 0, 36"
+  "lbbo\t%b1, %F10, 0, 9"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_9_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 10 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 10 "register_operand" "r")
                            (match_operand:SI 11 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))])]
+          (match_operand:QI 9 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 9"
-  "sbbo\t%1, %10, %11, 36"
+  "sbbo\t%b1, %F10, %11, 9"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_9"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 10 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+    [(set (mem:QI (match_operand:SI 10 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 11 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 10)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 10)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))])]
+          (match_operand:QI 9 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 9"
-  "sbbo\t%1, %10, 0, 36"
+  "sbbo\t%b1, %F10, 0, 9"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_10_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 11 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 11 "register_operand" "r")
                            (match_operand:SI 12 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 21 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 10"
-  "lbbo\t%1, %11, %12, 40"
+  "lbbo\t%b1, %F11, %12, 10"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_10"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 11 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 11 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 12 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 11)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 20 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 10"
-  "lbbo\t%1, %11, 0, 40"
+  "lbbo\t%b1, %F11, 0, 10"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_10_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 11 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 11 "register_operand" "r")
                            (match_operand:SI 12 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))])]
+          (match_operand:QI 10 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 10"
-  "sbbo\t%1, %11, %12, 40"
+  "sbbo\t%b1, %F11, %12, 10"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_10"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 11 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+    [(set (mem:QI (match_operand:SI 11 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 12 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 11)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 11)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))])]
+          (match_operand:QI 10 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 10"
-  "sbbo\t%1, %11, 0, 40"
+  "sbbo\t%b1, %F11, 0, 10"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_11_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 12 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 12 "register_operand" "r")
                            (match_operand:SI 13 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 23 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 11"
-  "lbbo\t%1, %12, %13, 44"
+  "lbbo\t%b1, %F12, %13, 11"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_11"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 12 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 12 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 13 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 12)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 22 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 11"
-  "lbbo\t%1, %12, 0, 44"
+  "lbbo\t%b1, %F12, 0, 11"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_11_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 12 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 12 "register_operand" "r")
                            (match_operand:SI 13 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))])]
+          (match_operand:QI 11 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 11"
-  "sbbo\t%1, %12, %13, 44"
+  "sbbo\t%b1, %F12, %13, 11"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_11"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 12 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+    [(set (mem:QI (match_operand:SI 12 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 13 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 12)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 12)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))])]
+          (match_operand:QI 11 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 11"
-  "sbbo\t%1, %12, 0, 44"
+  "sbbo\t%b1, %F12, 0, 11"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_12_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 13 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 13 "register_operand" "r")
                            (match_operand:SI 14 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 25 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 12"
-  "lbbo\t%1, %13, %14, 48"
+  "lbbo\t%b1, %F13, %14, 12"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_12"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 13 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 13 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 14 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 13)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 24 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 12"
-  "lbbo\t%1, %13, 0, 48"
+  "lbbo\t%b1, %F13, 0, 12"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_12_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 13 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 13 "register_operand" "r")
                            (match_operand:SI 14 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))])]
+          (match_operand:QI 12 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 12"
-  "sbbo\t%1, %13, %14, 48"
+  "sbbo\t%b1, %F13, %14, 12"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_12"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 13 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+    [(set (mem:QI (match_operand:SI 13 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 14 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 13)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 13)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))])]
+          (match_operand:QI 12 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 12"
-  "sbbo\t%1, %13, 0, 48"
+  "sbbo\t%b1, %F13, 0, 12"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_13_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 14 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 14 "register_operand" "r")
                            (match_operand:SI 15 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 27 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 13"
-  "lbbo\t%1, %14, %15, 52"
+  "lbbo\t%b1, %F14, %15, 13"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_13"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 14 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 14 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 15 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 14)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 26 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 13"
-  "lbbo\t%1, %14, 0, 52"
+  "lbbo\t%b1, %F14, 0, 13"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_13_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 14 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 14 "register_operand" "r")
                            (match_operand:SI 15 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))])]
+          (match_operand:QI 13 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 13"
-  "sbbo\t%1, %14, %15, 52"
+  "sbbo\t%b1, %F14, %15, 13"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_13"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 14 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+    [(set (mem:QI (match_operand:SI 14 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 15 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 14)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 14)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))])]
+          (match_operand:QI 13 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 13"
-  "sbbo\t%1, %14, 0, 52"
+  "sbbo\t%b1, %F14, 0, 13"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_14_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 15 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 15 "register_operand" "r")
                            (match_operand:SI 16 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 29 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 14"
-  "lbbo\t%1, %15, %16, 56"
+  "lbbo\t%b1, %F15, %16, 14"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_14"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 15 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 15 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 16 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 15)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 28 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 14"
-  "lbbo\t%1, %15, 0, 56"
+  "lbbo\t%b1, %F15, 0, 14"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_14_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 15 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 15 "register_operand" "r")
                            (match_operand:SI 16 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))])]
+          (match_operand:QI 14 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 14"
-  "sbbo\t%1, %15, %16, 56"
+  "sbbo\t%b1, %F15, %16, 14"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_14"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 15 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+    [(set (mem:QI (match_operand:SI 15 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 16 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 15)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 15)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))])]
+          (match_operand:QI 14 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 14"
-  "sbbo\t%1, %15, 0, 56"
+  "sbbo\t%b1, %F15, 0, 14"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_15_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 16 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 16 "register_operand" "r")
                            (match_operand:SI 17 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 31 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 15"
-  "lbbo\t%1, %16, %17, 60"
+  "lbbo\t%b1, %F16, %17, 15"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_15"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 16 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 16 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 17 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 16)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 30 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 15"
-  "lbbo\t%1, %16, 0, 60"
+  "lbbo\t%b1, %F16, 0, 15"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_15_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 16 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 16 "register_operand" "r")
                            (match_operand:SI 17 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))])]
+          (match_operand:QI 15 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 15"
-  "sbbo\t%1, %16, %17, 60"
+  "sbbo\t%b1, %F16, %17, 15"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_15"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 16 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+    [(set (mem:QI (match_operand:SI 16 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 17 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 16)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 16)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))])]
+          (match_operand:QI 15 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 15"
-  "sbbo\t%1, %16, 0, 60"
+  "sbbo\t%b1, %F16, 0, 15"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_16_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 17 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 17 "register_operand" "r")
                            (match_operand:SI 18 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 32 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 33 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 16"
-  "lbbo\t%1, %17, %18, 64"
+  "lbbo\t%b1, %F17, %18, 16"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_16"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 17 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 17 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 18 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 17)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 32 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 16"
-  "lbbo\t%1, %17, 0, 64"
+  "lbbo\t%b1, %F17, 0, 16"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_16_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 17 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 17 "register_operand" "r")
                            (match_operand:SI 18 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 33 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))])]
+          (match_operand:QI 16 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 16"
-  "sbbo\t%1, %17, %18, 64"
+  "sbbo\t%b1, %F17, %18, 16"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_16"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 17 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+    [(set (mem:QI (match_operand:SI 17 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 18 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 17)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 17)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))])]
+          (match_operand:QI 16 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 16"
-  "sbbo\t%1, %17, 0, 64"
+  "sbbo\t%b1, %F17, 0, 16"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_17_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 18 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 18 "register_operand" "r")
                            (match_operand:SI 19 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 32 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 33 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 34 "const_int_operand" "i"))))
-     (set (match_operand:SI 17 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 17 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 35 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 17"
-  "lbbo\t%1, %18, %19, 68"
+  "lbbo\t%b1, %F18, %19, 17"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_17"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 18 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 18 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 19 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 32 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 33 "const_int_operand" "i"))))
-     (set (match_operand:SI 17 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 18)
+     (set (match_operand:QI 17 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 34 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 17"
-  "lbbo\t%1, %18, 0, 68"
+  "lbbo\t%b1, %F18, 0, 17"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_17_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 18 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 18 "register_operand" "r")
                            (match_operand:SI 19 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 33 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 34 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 16 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 35 "const_int_operand" "i")))
-          (match_operand:SI 17 "register_operand" ""))])]
+          (match_operand:QI 17 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 17"
-  "sbbo\t%1, %18, %19, 68"
+  "sbbo\t%b1, %F18, %19, 17"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_17"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 18 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+    [(set (mem:QI (match_operand:SI 18 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 19 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 33 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 18)
+          (match_operand:QI 16 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 18)
                            (match_operand:SI 34 "const_int_operand" "i")))
-          (match_operand:SI 17 "register_operand" ""))])]
+          (match_operand:QI 17 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 17"
-  "sbbo\t%1, %18, 0, 68"
+  "sbbo\t%b1, %F18, 0, 17"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_18_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 19 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 19 "register_operand" "r")
                            (match_operand:SI 20 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 32 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 33 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 34 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 35 "const_int_operand" "i"))))
-     (set (match_operand:SI 17 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 17 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 36 "const_int_operand" "i"))))
-     (set (match_operand:SI 18 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 18 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 37 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 18"
-  "lbbo\t%1, %19, %20, 72"
+  "lbbo\t%b1, %F19, %20, 18"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_18"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 19 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 19 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 20 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 32 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 33 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 34 "const_int_operand" "i"))))
-     (set (match_operand:SI 17 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 17 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 35 "const_int_operand" "i"))))
-     (set (match_operand:SI 18 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 19)
+     (set (match_operand:QI 18 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 36 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 18"
-  "lbbo\t%1, %19, 0, 72"
+  "lbbo\t%b1, %F19, 0, 18"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_18_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 19 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 19 "register_operand" "r")
                            (match_operand:SI 20 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 33 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 34 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 35 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 16 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 36 "const_int_operand" "i")))
-          (match_operand:SI 17 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 17 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 37 "const_int_operand" "i")))
-          (match_operand:SI 18 "register_operand" ""))])]
+          (match_operand:QI 18 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 18"
-  "sbbo\t%1, %19, %20, 72"
+  "sbbo\t%b1, %F19, %20, 18"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_18"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 19 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+    [(set (mem:QI (match_operand:SI 19 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 20 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 33 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 34 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 16 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 35 "const_int_operand" "i")))
-          (match_operand:SI 17 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 19)
+          (match_operand:QI 17 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 19)
                            (match_operand:SI 36 "const_int_operand" "i")))
-          (match_operand:SI 18 "register_operand" ""))])]
+          (match_operand:QI 18 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 18"
-  "sbbo\t%1, %19, 0, 72"
+  "sbbo\t%b1, %F19, 0, 18"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_19_offs"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (plus:SI (match_operand:SI 20 "register_operand" "r")
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (plus:SI (match_operand:SI 20 "register_operand" "r")
                            (match_operand:SI 21 "const_ubyte_operand" "I"))))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 32 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 33 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 34 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 35 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 36 "const_int_operand" "i"))))
-     (set (match_operand:SI 17 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 17 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 37 "const_int_operand" "i"))))
-     (set (match_operand:SI 18 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 18 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 38 "const_int_operand" "i"))))
-     (set (match_operand:SI 19 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 19 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 39 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 19"
-  "lbbo\t%1, %20, %21, 76"
+  "lbbo\t%b1, %F20, %21, 19"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*lbbo_multiple_19"
   [(match_parallel 0 "pru_load_multiple_operation"
-    [(set (match_operand:SI 1 "register_operand" "")
-          (mem:SI (match_operand:SI 20 "register_operand" "r")))
-     (set (match_operand:SI 2 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+    [(set (match_operand:QI 1 "register_operand" "")
+          (mem:QI (match_operand:SI 20 "register_operand" "r")))
+     (set (match_operand:QI 2 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 21 "const_int_operand" "i"))))
-     (set (match_operand:SI 3 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 3 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 22 "const_int_operand" "i"))))
-     (set (match_operand:SI 4 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 4 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 23 "const_int_operand" "i"))))
-     (set (match_operand:SI 5 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 5 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 24 "const_int_operand" "i"))))
-     (set (match_operand:SI 6 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 6 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 25 "const_int_operand" "i"))))
-     (set (match_operand:SI 7 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 7 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 26 "const_int_operand" "i"))))
-     (set (match_operand:SI 8 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 8 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 27 "const_int_operand" "i"))))
-     (set (match_operand:SI 9 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 9 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 28 "const_int_operand" "i"))))
-     (set (match_operand:SI 10 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 10 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 29 "const_int_operand" "i"))))
-     (set (match_operand:SI 11 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 11 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 30 "const_int_operand" "i"))))
-     (set (match_operand:SI 12 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 12 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 31 "const_int_operand" "i"))))
-     (set (match_operand:SI 13 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 13 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 32 "const_int_operand" "i"))))
-     (set (match_operand:SI 14 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 14 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 33 "const_int_operand" "i"))))
-     (set (match_operand:SI 15 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 15 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 34 "const_int_operand" "i"))))
-     (set (match_operand:SI 16 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 16 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 35 "const_int_operand" "i"))))
-     (set (match_operand:SI 17 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 17 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 36 "const_int_operand" "i"))))
-     (set (match_operand:SI 18 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 18 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 37 "const_int_operand" "i"))))
-     (set (match_operand:SI 19 "register_operand" "")
-          (mem:SI (plus:SI (match_dup 20)
+     (set (match_operand:QI 19 "register_operand" "")
+          (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 38 "const_int_operand" "i"))))])]
   "XVECLEN (operands[0], 0) == 19"
-  "lbbo\t%1, %20, 0, 76"
+  "lbbo\t%b1, %F20, 0, 19"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_19_offs"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (plus:SI (match_operand:SI 20 "register_operand" "r")
+    [(set (mem:QI (plus:SI (match_operand:SI 20 "register_operand" "r")
                            (match_operand:SI 21 "const_ubyte_operand" "I")))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 33 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 34 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 35 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 36 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 16 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 37 "const_int_operand" "i")))
-          (match_operand:SI 17 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 17 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 38 "const_int_operand" "i")))
-          (match_operand:SI 18 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 18 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 39 "const_int_operand" "i")))
-          (match_operand:SI 19 "register_operand" ""))])]
+          (match_operand:QI 19 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 19"
-  "sbbo\t%1, %20, %21, 76"
+  "sbbo\t%b1, %F20, %21, 19"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
 (define_insn "*sbbo_multiple_19"
   [(match_parallel 0 "pru_store_multiple_operation"
-    [(set (mem:SI (match_operand:SI 20 "register_operand" "r"))
-          (match_operand:SI 1 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+    [(set (mem:QI (match_operand:SI 20 "register_operand" "r"))
+          (match_operand:QI 1 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 21 "const_int_operand" "i")))
-          (match_operand:SI 2 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 2 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 22 "const_int_operand" "i")))
-          (match_operand:SI 3 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 3 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 23 "const_int_operand" "i")))
-          (match_operand:SI 4 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 4 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 24 "const_int_operand" "i")))
-          (match_operand:SI 5 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 5 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 25 "const_int_operand" "i")))
-          (match_operand:SI 6 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 6 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 26 "const_int_operand" "i")))
-          (match_operand:SI 7 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 7 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 27 "const_int_operand" "i")))
-          (match_operand:SI 8 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 8 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 28 "const_int_operand" "i")))
-          (match_operand:SI 9 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 9 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 29 "const_int_operand" "i")))
-          (match_operand:SI 10 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 10 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 30 "const_int_operand" "i")))
-          (match_operand:SI 11 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 11 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 31 "const_int_operand" "i")))
-          (match_operand:SI 12 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 12 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 32 "const_int_operand" "i")))
-          (match_operand:SI 13 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 13 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 33 "const_int_operand" "i")))
-          (match_operand:SI 14 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 14 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 34 "const_int_operand" "i")))
-          (match_operand:SI 15 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 15 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 35 "const_int_operand" "i")))
-          (match_operand:SI 16 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 16 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 36 "const_int_operand" "i")))
-          (match_operand:SI 17 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 17 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 37 "const_int_operand" "i")))
-          (match_operand:SI 18 "register_operand" ""))
-     (set (mem:SI (plus:SI (match_dup 20)
+          (match_operand:QI 18 "register_operand" ""))
+     (set (mem:QI (plus:SI (match_dup 20)
                            (match_operand:SI 38 "const_int_operand" "i")))
-          (match_operand:SI 19 "register_operand" ""))])]
+          (match_operand:QI 19 "register_operand" ""))])]
   "XVECLEN (operands[0], 0) == 19"
-  "sbbo\t%1, %20, 0, 76"
+  "sbbo\t%b1, %F20, 0, 19"
   [(set_attr "type" "ld")
    (set_attr "length" "4")])
 
diff --git a/gcc/config/pru/pru-ldst-multiple.ml b/gcc/config/pru/pru-ldst-multiple.ml
index 23747a37e96..5b5f8e20a60 100644
--- a/gcc/config/pru/pru-ldst-multiple.ml
+++ b/gcc/config/pru/pru-ldst-multiple.ml
@@ -29,7 +29,7 @@
      ocaml pru-ldst-multiple.ml >/path/to/gcc/config/pru/ldst-multiple.md
 *)
 
-let destreg nregs first =
+let write_addr_reg nregs first =
   if not first then
     Printf.sprintf "(match_dup %d)" (nregs + 1)
   else
@@ -39,12 +39,12 @@ let destreg nregs first =
 let write_ldm_set nregs opnr first do_first_offs =
   let indent = "     " in
   Printf.printf "%s" (if first then "    [" else indent);
-  Printf.printf "(set (match_operand:SI %d \"register_operand\" \"\")\n" opnr;
-  Printf.printf "%s     (mem:SI " indent;
+  Printf.printf "(set (match_operand:QI %d \"register_operand\" \"\")\n" opnr;
+  Printf.printf "%s     (mem:QI " indent;
   if (first && not do_first_offs) then begin
-    Printf.printf "%s" (destreg nregs first);
+    Printf.printf "%s" (write_addr_reg nregs first);
   end else begin
-    Printf.printf "(plus:SI %s" (destreg nregs first);
+    Printf.printf "(plus:SI %s" (write_addr_reg nregs first);
     Printf.printf "\n%s                      (match_operand:SI %d "
       indent
       (if do_first_offs then (nregs + 1 + opnr) else (nregs + opnr));
@@ -58,12 +58,12 @@ let write_ldm_set nregs opnr first do_first_offs =
 let write_stm_set nregs opnr first do_first_offs =
   let indent = "     " in
   Printf.printf "%s" (if first then "    [" else indent);
-  Printf.printf "(set (mem:SI ";
+  Printf.printf "(set (mem:QI ";
   if (first && not do_first_offs) then begin
-    Printf.printf "%s" (destreg nregs first);
+    Printf.printf "%s" (write_addr_reg nregs first);
   end else begin
     Printf.printf "(plus:SI ";
-    Printf.printf "%s" (destreg nregs first);
+    Printf.printf "%s" (write_addr_reg nregs first);
     Printf.printf "\n%s                      (match_operand:SI %d "
       indent
       (if do_first_offs then (nregs + 1 + opnr) else (nregs + opnr));
@@ -73,7 +73,7 @@ let write_stm_set nregs opnr first do_first_offs =
       Printf.printf "\"const_int_operand\" \"i\"))"
     end;
   end;
-  Printf.printf ")\n%s     (match_operand:SI %d \"register_operand\" \"\"))" indent opnr
+  Printf.printf ")\n%s     (match_operand:QI %d \"register_operand\" \"\"))" indent opnr
 
 let rec write_pat_sets func opnr first n_left do_first_offs =
   func opnr first do_first_offs;
@@ -94,9 +94,9 @@ let write_pattern_1 name ls nregs do_first_offs write_set_fn =
   write_pat_sets (write_set_fn nregs) 1 true nregs do_first_offs;
   Printf.printf ")]\n  \"XVECLEN (operands[0], 0) == %d\"\n" nregs;
   if do_first_offs then begin
-    Printf.printf "  \"%s\\t%%1, %%%d, %%%d, %d\"\n" name (nregs + 1) (nregs + 2) (nregs * 4);
+    Printf.printf "  \"%s\\t%%b1, %%F%d, %%%d, %d\"\n" name (nregs + 1) (nregs + 2) (nregs * 1);
   end else begin
-    Printf.printf "  \"%s\\t%%1, %%%d, 0, %d\"\n" name (nregs + 1) (nregs * 4);
+    Printf.printf "  \"%s\\t%%b1, %%F%d, 0, %d\"\n" name (nregs + 1) (nregs * 1);
   end;
   Printf.printf "  [(set_attr \"type\" \"ld\")\n";
   Printf.printf "   (set_attr \"length\" \"4\")";
diff --git a/gcc/config/pru/pru-modes.def b/gcc/config/pru/pru-modes.def
index d37259a1105..d10fea2f32f 100644
--- a/gcc/config/pru/pru-modes.def
+++ b/gcc/config/pru/pru-modes.def
@@ -17,13 +17,3 @@ You should have received a copy of the GNU General Public License
 along with GCC; see the file COPYING3.  If not see
 <http://www.gnu.org/licenses/>.  */
 
-INT_MODE (OI, 32);
-INT_MODE (XI, 64);
-
-/* Keep the OI and XI modes from confusing the compiler into thinking
-   that these modes could actually be used for computation.  They are
-   only holders for vectors during data movement.  */
-#define MAX_BITSIZE_MODE_ANY_INT (128)
-
-/* The symbol Pmode stands for one of the above machine modes (usually SImode).
-   The tm.h file specifies which one.  It is not a distinct mode.  */
diff --git a/gcc/config/pru/pru-protos.h b/gcc/config/pru/pru-protos.h
index 07717136912..f05029eac54 100644
--- a/gcc/config/pru/pru-protos.h
+++ b/gcc/config/pru/pru-protos.h
@@ -39,6 +39,7 @@ void pru_register_pragmas (void);
 
 #ifdef RTX_CODE
 extern rtx pru_get_return_address (int);
+extern int pru_hard_regno_rename_ok (unsigned int, unsigned int);
 
 extern const char * pru_output_sign_extend (rtx *);
 extern const char * pru_output_signed_cbranch (rtx *, bool);
diff --git a/gcc/config/pru/pru.c b/gcc/config/pru/pru.c
index cf6c1d8f907..10df43d47c3 100644
--- a/gcc/config/pru/pru.c
+++ b/gcc/config/pru/pru.c
@@ -1,5 +1,5 @@
 /* Target machine subroutines for TI PRU.
-   Copyright (C) 2014 Free Software Foundation, Inc.
+   Copyright (C) 2014-2017 Free Software Foundation, Inc.
    Dimitar Dimitrov <dimitar@dinux.eu>
 
    This file is part of GCC.
@@ -25,6 +25,8 @@
 #include "target.h"
 #include "rtl.h"
 #include "tree.h"
+#include "stringpool.h"
+#include "attribs.h"
 #include "df.h"
 #include "memmodel.h"
 #include "tm_p.h"
@@ -51,7 +53,7 @@
 /* This file should be included last.  */
 #include "target-def.h"
 
-/* Global PRU CTABLE entries, filled in by pragmaes, and used for fast
+/* Global PRU CTABLE entries, filled in by pragmas, and used for fast
    addressing via LBCO/SBCO instructions.  */
 struct pru_ctable_entry pru_ctable[32];
 
@@ -65,7 +67,7 @@ struct GTY (()) machine_function
      with register save masks, and offsets for the current function.  */
 
   /* Mask of registers to save.  */
-  unsigned int save_mask;
+  HARD_REG_SET save_mask;
   /* Number of bytes that the entire frame takes up.  */
   int total_size;
   /* Number of bytes that variables take up.  */
@@ -98,7 +100,7 @@ static int
 pru_compute_frame_layout (void)
 {
   unsigned int regno;
-  unsigned int save_mask = 0;
+  HARD_REG_SET *save_mask;
   int total_size;
   int var_size;
   int out_args_size;
@@ -107,6 +109,9 @@ pru_compute_frame_layout (void)
   if (cfun->machine->initialized)
     return cfun->machine->total_size;
 
+  save_mask = &cfun->machine->save_mask;
+  CLEAR_HARD_REG_SET (*save_mask);
+
   var_size = PRU_STACK_ALIGN (get_frame_size ());
   out_args_size = PRU_STACK_ALIGN (crtl->outgoing_args_size);
   total_size = var_size + out_args_size;
@@ -116,17 +121,17 @@ pru_compute_frame_layout (void)
   for (regno = 0; regno <= LAST_GP_REG; regno++)
     if (prologue_saved_reg_p (regno))
       {
-	save_mask |= 1 << regno;
-	save_reg_size += 4;
+	SET_HARD_REG_BIT (*save_mask, regno);
+	save_reg_size += 1;
       }
 
   cfun->machine->fp_save_offset = 0;
-  if (save_mask & (1 << HARD_FRAME_POINTER_REGNUM))
+  if (TEST_HARD_REG_BIT (*save_mask, HARD_FRAME_POINTER_REGNUM))
     {
       int fp_save_offset = 0;
       for (regno = 0; regno < HARD_FRAME_POINTER_REGNUM; regno++)
-	if (save_mask & (1 << regno))
-	  fp_save_offset += 4;
+	if (TEST_HARD_REG_BIT (*save_mask, regno))
+	  fp_save_offset += 1;
 
       cfun->machine->fp_save_offset = fp_save_offset;
     }
@@ -136,7 +141,6 @@ pru_compute_frame_layout (void)
   total_size += PRU_STACK_ALIGN (crtl->args.pretend_args_size);
 
   /* Save other computed information.  */
-  cfun->machine->save_mask = save_mask;
   cfun->machine->total_size = total_size;
   cfun->machine->var_size = var_size;
   cfun->machine->args_size = out_args_size;
@@ -215,14 +219,14 @@ xbbo_next_reg_cluster (int regno_start, int *sp_offset, bool do_store)
 
   /* Skip the empty slots.  */
   for (; regno_start <= LAST_GP_REG; )
-    if (cfun->machine->save_mask & (1 << regno_start))
+    if (TEST_HARD_REG_BIT (cfun->machine->save_mask, regno_start))
       break;
     else
       regno_start++;
 
   /* Find the largest consecutive group of registers to save.  */
-  for (regno = regno_start; regno <= LAST_GP_REG; )
-    if (cfun->machine->save_mask & (1 << regno))
+  for (regno = regno_start; regno <= LAST_GP_REG && nregs < MAX_XBBO_BURST_LEN; )
+    if (TEST_HARD_REG_BIT (cfun->machine->save_mask, regno))
       {
 	regno++;
 	nregs++;
@@ -241,10 +245,10 @@ xbbo_next_reg_cluster (int regno_start, int *sp_offset, bool do_store)
 
   if (do_store)
     insn = gen_store_multiple (gen_frame_mem (Pmode, addr),
-			       gen_rtx_REG (SImode, regno_start),
+			       gen_rtx_REG (QImode, regno_start),
 			       GEN_INT (nregs));
   else
-    insn = gen_load_multiple (gen_rtx_REG (SImode, regno_start),
+    insn = gen_load_multiple (gen_rtx_REG (QImode, regno_start),
 			      gen_frame_mem (Pmode, addr),
 			      GEN_INT (nregs));
 
@@ -399,8 +403,7 @@ pru_get_return_address (int count)
     return const0_rtx;
 
   /* Return r3.w2.  */
-  return gen_rtx_LSHIFTRT (SImode, get_hard_reg_initial_val (Pmode, RA_REGNO),
-			   GEN_INT (16));
+  return get_hard_reg_initial_val (HImode, RA_REGNO);
 }
 
 /* Implement FUNCTION_PROFILER macro.  */
@@ -448,9 +451,17 @@ prologue_saved_reg_p (unsigned regno)
 
   if (regno == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)
     return true;
+  if (regno == HARD_FRAME_POINTER_REGNUM + 1 && frame_pointer_needed)
+    return true;
+  if (regno == HARD_FRAME_POINTER_REGNUM + 2 && frame_pointer_needed)
+    return true;
+  if (regno == HARD_FRAME_POINTER_REGNUM + 3 && frame_pointer_needed)
+    return true;
 
   if (regno == RA_REGNO && df_regs_ever_live_p (RA_REGNO))
     return true;
+  if (regno == RA_REGNO + 1 && df_regs_ever_live_p (RA_REGNO + 1))
+    return true;
 
   return false;
 }
@@ -509,6 +520,80 @@ pru_can_use_return_insn (void)
   return pru_compute_frame_layout () == 0;
 }
 
+
+/* Implement TARGET_MODES_TIEABLE_P.  */
+
+static bool
+pru_modes_tieable_p (machine_mode mode1, machine_mode mode2)
+{
+  return (mode1 == mode2
+          || (GET_MODE_SIZE (mode1) <= 4 && GET_MODE_SIZE (mode2) <= 4));
+}
+
+/* Implement TARGET_HARD_REGNO_MODE_OK.  */
+
+static bool
+pru_hard_regno_mode_ok (unsigned int regno, machine_mode mode)
+{
+  switch (GET_MODE_SIZE (mode))
+    {
+    case 1: return true;
+    case 2: return (regno % 4) <= 2;
+    case 4: return (regno % 4) == 0;
+    default: return (regno % 4) == 0; /* TODO - check why we get VOIDmode.  */
+    }
+}
+
+/* Implement `TARGET_HARD_REGNO_SCRATCH_OK'.  */
+/* Returns true if SCRATCH are safe to be allocated as a scratch
+   registers (for a define_peephole2) in the current function.  */
+
+static bool
+pru_hard_regno_scratch_ok (unsigned int regno)
+{
+  /* Don't allow hard registers that might be part of the frame pointer.
+     Some places in the compiler just test for [HARD_]FRAME_POINTER_REGNUM
+     and don't care for a frame pointer that spans more than one register.  */
+
+  if ((!reload_completed || frame_pointer_needed)
+      && ((regno >= HARD_FRAME_POINTER_REGNUM
+	   && regno <= HARD_FRAME_POINTER_REGNUM + 3)
+	  || (regno >= FRAME_POINTER_REGNUM
+	      && regno <= FRAME_POINTER_REGNUM + 3)))
+    {
+      return false;
+    }
+
+  return true;
+}
+
+
+/* Worker function for `HARD_REGNO_RENAME_OK'.  */
+/* Return nonzero if register OLD_REG can be renamed to register NEW_REG.  */
+
+int
+pru_hard_regno_rename_ok (unsigned int old_reg,
+			  unsigned int new_reg)
+{
+  /* Don't allow hard registers that might be part of the frame pointer.
+     Some places in the compiler just test for [HARD_]FRAME_POINTER_REGNUM
+     and don't care for a frame pointer that spans more than one register.  */
+  if ((!reload_completed || frame_pointer_needed)
+      && ((old_reg >= HARD_FRAME_POINTER_REGNUM
+	   && old_reg <= HARD_FRAME_POINTER_REGNUM + 3)
+	  || (old_reg >= FRAME_POINTER_REGNUM
+	      && old_reg <= FRAME_POINTER_REGNUM + 3)
+	  || (new_reg >= HARD_FRAME_POINTER_REGNUM
+	      && new_reg <= HARD_FRAME_POINTER_REGNUM + 3)
+	  || (new_reg >= FRAME_POINTER_REGNUM
+	      && new_reg <= FRAME_POINTER_REGNUM + 3)))
+    {
+      return 0;
+    }
+
+  return 1;
+}
+
 /* Allocate a chunk of memory for per-function machine-dependent data.  */
 static struct machine_function *
 pru_init_machine_status (void)
@@ -524,6 +609,17 @@ pru_option_override (void)
   SUBTARGET_OVERRIDE_OPTIONS;
 #endif
 
+  /* Unwind tables currently require a frame pointer for correctness,
+     see toplev.c:process_options().  */
+
+  if ((flag_unwind_tables
+       || flag_non_call_exceptions
+       || flag_asynchronous_unwind_tables)
+      && !ACCUMULATE_OUTGOING_ARGS)
+    {
+      flag_omit_frame_pointer = 0;
+    }
+
   /* Check for unsupported options.  */
   if (flag_pic == 1)
     warning (OPT_fpic, "-fpic is not supported");
@@ -566,11 +662,16 @@ pru_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED,
 	    *total = COSTS_N_INSNS (0);
 	    return true;
 	  }
-	else
+	else if (UHWORD_INT (INTVAL (x)))
 	  {
 	    *total = COSTS_N_INSNS (1);
 	    return true;
 	  }
+	else
+	  {
+	    *total = COSTS_N_INSNS (2);
+	    return true;
+	  }
 
       case LABEL_REF:
       case SYMBOL_REF:
@@ -586,7 +687,7 @@ pru_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED,
 	     the mode for the factor.  */
 	  mode = GET_MODE (SET_DEST (x));
 
-	  if (GET_MODE_SIZE (mode) <= UNITS_PER_WORD
+	  if (GET_MODE_SIZE (mode) <= GET_MODE_SIZE (SImode)
 	      && (GET_CODE (SET_SRC (x)) == ZERO_EXTEND
 		  || outer_code == ZERO_EXTEND))
 	    {
@@ -594,7 +695,8 @@ pru_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED,
 	    }
 	  else
 	    {
-	      int factor = GET_MODE_SIZE (mode) / UNITS_PER_WORD;
+	      /* SI move has the same cost as a QI move.  */
+	      int factor = GET_MODE_SIZE (mode) / GET_MODE_SIZE (SImode);
 	      if (factor == 0)
 		factor = 1;
 	      *total = factor * COSTS_N_INSNS (1);
@@ -644,6 +746,24 @@ pru_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED,
 	    *total = COSTS_N_INSNS (6);
 	  return false;
 	}
+      case ZERO_EXTRACT:
+	{
+	  rtx op2 = XEXP(x, 2);
+	  if ((outer_code == EQ || outer_code == NE)
+	      && CONST_INT_P (op2)
+	      && INTVAL (op2) == 1)
+	    {
+	      /* Branch if bit is set/clear is a single instruction. */
+	      *total = COSTS_N_INSNS (0);
+	      return true;
+	    }
+	  else
+	    {
+	      *total = COSTS_N_INSNS (2);
+	      return false;
+	    }
+	}
+
       case ZERO_EXTEND:
 	{
 	  *total = COSTS_N_INSNS (0);
@@ -651,7 +771,11 @@ pru_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED,
 	}
 
       default:
-	return false;
+	{
+	  /* Do not factor mode size in the cost.  */
+	  *total = COSTS_N_INSNS (1);
+	  return false;
+	}
     }
 }
 
@@ -678,14 +802,23 @@ pru_output_sign_extend (rtx *operands)
   int bufi;
   const int dst_sz = GET_MODE_SIZE (GET_MODE (operands[0]));
   const int src_sz = GET_MODE_SIZE (GET_MODE (operands[1]));
-  const int ext_start = src_sz;
+  char ext_start;
+
+  switch (src_sz)
+    {
+    case 1: ext_start = 'y'; break;
+    case 2: ext_start = 'z'; break;
+    default: gcc_unreachable ();
+    }
 
   gcc_assert (dst_sz > src_sz);
 
+  /* Note that src and dst can be different parts of the same
+     register, e.g. "r7, r7.w1".  */
   bufi = snprintf (buf, sizeof (buf),
-	  "mov\t%%0, %%x1\n\t"		      /* Copy AND make positive.  */
-	  "qbbc\t.+8, %%x0, %d\n\t"	      /* Check sign bit.  */
-	  "fill\t%%0.b%d, %d",		      /* Make negative.  */
+	  "mov\t%%0, %%1\n\t"		      /* Copy AND make positive.  */
+	  "qbbc\t.+8, %%0, %d\n\t"	      /* Check sign bit.  */
+	  "fill\t%%%c0, %d",		      /* Make negative.  */
 	  sign_bit_position (operands[1]),
 	  ext_start,
 	  dst_sz - src_sz);
@@ -763,11 +896,11 @@ pru_output_ltle_signed_cbranch (rtx *operands, bool is_near)
   if (is_near)
     {
       bufi = snprintf (buf, sizeof (buf),
-		       "qbbc\t.+12, %%x1, %d\n\t"
-		       "qbbc\t%%l3, %%x2, %d\n\t"   /* OP1_NEG.  */
-		       "%s\t%%l3, %%x2, %%x1\n\t"   /* OP1_NEG_OP2_NEG.  */
-		       "qbbs\t.+8, %%x2, %d\n\t"    /* OP1_POS.  */
-		       "%s\t%%l3, %%x2, %%x1",	    /* OP1_POS_OP2_POS.  */
+		       "qbbc\t.+12, %%1, %d\n\t"
+		       "qbbc\t%%l3, %%2, %d\n\t"   /* OP1_NEG.  */
+		       "%s\t%%l3, %%2, %%1\n\t"   /* OP1_NEG_OP2_NEG.  */
+		       "qbbs\t.+8, %%2, %d\n\t"    /* OP1_POS.  */
+		       "%s\t%%l3, %%2, %%1",	    /* OP1_POS_OP2_POS.  */
 		       sign_bit_position (op1),
 		       sign_bit_position (op2),
 		       cmp_opstr,
@@ -777,11 +910,11 @@ pru_output_ltle_signed_cbranch (rtx *operands, bool is_near)
   else
     {
       bufi = snprintf (buf, sizeof (buf),
-		       "qbbc\t.+12, %%x1, %d\n\t"
-		       "qbbc\t.+20, %%x2, %d\n\t"   /* OP1_NEG.  */
-		       "%s\t.+16, %%x2, %%x1\n\t"   /* OP1_NEG_OP2_NEG.  */
-		       "qbbs\t.+16, %%x2, %d\n\t"   /* OP1_POS.  */
-		       "%s\t.+8, %%x2, %%x1\n\t"    /* OP1_POS_OP2_POS.  */
+		       "qbbc\t.+12, %%1, %d\n\t"
+		       "qbbc\t.+20, %%2, %d\n\t"   /* OP1_NEG.  */
+		       "%s\t.+16, %%2, %%1\n\t"   /* OP1_NEG_OP2_NEG.  */
+		       "qbbs\t.+16, %%2, %d\n\t"   /* OP1_POS.  */
+		       "%s\t.+8, %%2, %%1\n\t"    /* OP1_POS_OP2_POS.  */
 		       "jmp\t.+8\n\t"		    /* jmp OUT.  */
 		       "jmp\t%%%%label(%%l3)",	    /* BRANCH_TAKEN_LABEL.  */
 		       sign_bit_position (op1),
@@ -823,11 +956,11 @@ pru_output_gtge_signed_cbranch (rtx *operands, bool is_near)
   if (is_near)
     {
       bufi = snprintf (buf, sizeof (buf),
-		       "qbbs\t.+12, %%x1, %d\n\t"
-		       "qbbs\t%%l3, %%x2, %d\n\t"   /* OP1_POS.  */
-		       "%s\t%%l3, %%x2, %%x1\n\t"   /* OP1_POS_OP2_POS.  */
-		       "qbbc\t.+8, %%x2, %d\n\t"    /* OP1_NEG.  */
-		       "%s\t%%l3, %%x2, %%x1",      /* OP1_NEG_OP2_NEG.  */
+		       "qbbs\t.+12, %%1, %d\n\t"
+		       "qbbs\t%%l3, %%2, %d\n\t"   /* OP1_POS.  */
+		       "%s\t%%l3, %%2, %%1\n\t"   /* OP1_POS_OP2_POS.  */
+		       "qbbc\t.+8, %%2, %d\n\t"    /* OP1_NEG.  */
+		       "%s\t%%l3, %%2, %%1",      /* OP1_NEG_OP2_NEG.  */
 		       sign_bit_position (op1),
 		       sign_bit_position (op2),
 		       cmp_opstr,
@@ -837,11 +970,11 @@ pru_output_gtge_signed_cbranch (rtx *operands, bool is_near)
   else
     {
       bufi = snprintf (buf, sizeof (buf),
-		       "qbbs\t.+12, %%x1, %d\n\t"
-		       "qbbs\t.+20, %%x2, %d\n\t"   /* OP1_POS.  */
-		       "%s\t.+16, %%x2, %%x1\n\t"   /* OP1_POS_OP2_POS.  */
-		       "qbbc\t.+16, %%x2, %d\n\t"   /* OP1_NEG.  */
-		       "%s\t.+8, %%x2, %%x1\n\t"    /* OP1_NEG_OP2_NEG.  */
+		       "qbbs\t.+12, %%1, %d\n\t"
+		       "qbbs\t.+20, %%2, %d\n\t"   /* OP1_POS.  */
+		       "%s\t.+16, %%2, %%1\n\t"   /* OP1_POS_OP2_POS.  */
+		       "qbbc\t.+16, %%2, %d\n\t"   /* OP1_NEG.  */
+		       "%s\t.+8, %%2, %%1\n\t"    /* OP1_NEG_OP2_NEG.  */
 		       "jmp\t.+8\n\t"		    /* jmp OUT.  */
 		       "jmp\t%%%%label(%%l3)",	    /* BRANCH_TAKEN_LABEL.  */
 		       sign_bit_position (op1),
@@ -907,14 +1040,14 @@ pru_output_signed_cbranch_ubyteop2 (rtx *operands, bool is_near)
     {
       if (is_near)
 	snprintf (buf, sizeof (buf),
-		  "qbbs\t.+8, %%x1, %d\n\t"
-		  "%s\t%%l3, %%x1, %%x2",
+		  "qbbs\t.+8, %%1, %d\n\t"
+		  "%s\t%%l3, %%1, %%2",
 		  regop_sign_bit_pos,
 		  cmp_opstr);
       else
 	snprintf (buf, sizeof (buf),
-		  "qbbs\t.+12, %%x1, %d\n\t"
-		  "%s\t.+8, %%x1, %%x2\n\t"
+		  "qbbs\t.+12, %%1, %d\n\t"
+		  "%s\t.+8, %%1, %%2\n\t"
 		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos,
 		  rcmp_opstr);
@@ -923,14 +1056,14 @@ pru_output_signed_cbranch_ubyteop2 (rtx *operands, bool is_near)
     {
       if (is_near)
 	snprintf (buf, sizeof (buf),
-		  "qbbs\t%%l3, %%x1, %d\n\t"
-		  "%s\t%%l3, %%x1, %%x2",
+		  "qbbs\t%%l3, %%1, %d\n\t"
+		  "%s\t%%l3, %%1, %%2",
 		  regop_sign_bit_pos,
 		  cmp_opstr);
       else
 	snprintf (buf, sizeof (buf),
-		  "qbbs\t.+8, %%x1, %d\n\t"
-		  "%s\t.+8, %%x1, %%x2\n\t"
+		  "qbbs\t.+8, %%1, %d\n\t"
+		  "%s\t.+8, %%1, %%2\n\t"
 		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos,
 		  rcmp_opstr);
@@ -958,11 +1091,11 @@ pru_output_signed_cbranch_zeroop2 (rtx *operands, bool is_near)
     {
       if (is_near)
 	snprintf (buf, sizeof (buf),
-		  "qbbs\t%%l3, %%x1, %d\n\t",
+		  "qbbs\t%%l3, %%1, %d\n\t",
 		  regop_sign_bit_pos);
       else
 	snprintf (buf, sizeof (buf),
-		  "qbbc\t.+8, %%x1, %d\n\t"
+		  "qbbc\t.+8, %%1, %d\n\t"
 		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos);
     }
@@ -970,11 +1103,11 @@ pru_output_signed_cbranch_zeroop2 (rtx *operands, bool is_near)
     {
       if (is_near)
 	snprintf (buf, sizeof (buf),
-		  "qbbc\t%%l3, %%x1, %d\n\t",
+		  "qbbc\t%%l3, %%1, %d\n\t",
 		  regop_sign_bit_pos);
       else
 	snprintf (buf, sizeof (buf),
-		  "qbbs\t.+8, %%x1, %d\n\t"
+		  "qbbs\t.+8, %%1, %d\n\t"
 		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos);
     }
@@ -1018,7 +1151,7 @@ pru_valid_const_ubyte_offset (machine_mode mode, HOST_WIDE_INT offset)
 
   /* Reload can split multi word accesses, so make sure we can address
      the second word in a DI.  */
-  if (valid && GET_MODE_SIZE (mode) > UNITS_PER_WORD)
+  if (valid && GET_MODE_SIZE (mode) > GET_MODE_SIZE (SImode))
     valid = UBYTE_INT (offset + GET_MODE_SIZE (mode) - 1);
 
   return valid;
@@ -1164,14 +1297,85 @@ pru_comparison_str (enum rtx_code cond)
     }
 }
 
+/* Access some RTX as INT_MODE.  If X is a CONST_FIXED we can get
+   the bit representation of X by "casting" it to CONST_INT.  */
+
+static rtx
+pru_to_int_mode (rtx x)
+{
+  machine_mode mode = GET_MODE (x);
+
+  return VOIDmode == mode
+    ? x
+    : simplify_gen_subreg (int_mode_for_mode (mode).require (), x, mode, 0);
+}
+
+/* Translate between the MachineDescription notion
+   of 8-bit consecutive registers, to the PRU
+   assembler syntax of REGWORD[.SUBREG].  */
+static const char *
+pru_asm_regname(rtx op)
+{
+  static char canon_reg_names[3][LAST_GP_REG][8];
+  int speci, regi;
+
+  gcc_assert (REG_P (op));
+
+  if (!canon_reg_names[0][0][0])
+    {
+      for (regi = 0; regi < LAST_GP_REG; regi++)
+	for (speci = 0; speci < 3; speci++)
+	  {
+	    const int sz = (speci == 0) ? 1 : ((speci == 1) ? 2 : 4);
+	    if ((regi + sz) > (32 * 4))
+	      continue;	/* invalid entry */
+
+	    /* Construct the lookup table.  */
+	    const char *suffix = "";
+
+	    switch ((sz << 8) | (regi % 4))
+	      {
+	      case (1 << 8) | 0: suffix = ".b0"; break;
+	      case (1 << 8) | 1: suffix = ".b1"; break;
+	      case (1 << 8) | 2: suffix = ".b2"; break;
+	      case (1 << 8) | 3: suffix = ".b3"; break;
+	      case (2 << 8) | 0: suffix = ".w0"; break;
+	      case (2 << 8) | 1: suffix = ".w1"; break;
+	      case (2 << 8) | 2: suffix = ".w2"; break;
+	      case (4 << 8) | 0: suffix = ""; break;
+	      default:
+		/* Invalid entry.  */
+		continue;
+	      }
+	    sprintf (&canon_reg_names[speci][regi][0],
+		     "r%d%s", regi / 4, suffix);
+	  }
+    }
+
+  switch (GET_MODE_SIZE (GET_MODE (op)))
+    {
+    case 1: speci = 0; break;
+    case 2: speci = 1; break;
+    case 4: speci = 2; break;
+    case 8: speci = 2; break; /* Existing GCC test cases are not using %F.  */
+    default: gcc_unreachable();
+    }
+  regi = REGNO (op);
+  gcc_assert (regi < LAST_GP_REG);
+  gcc_assert (canon_reg_names[speci][regi][0]);
+
+  return &canon_reg_names[speci][regi][0];
+}
+
 /* Print the operand OP to file stream FILE modified by LETTER.
    LETTER can be one of:
 
-     x: for registers with size (e.g. R0.b0, R3.w0)
+     b: prints the register byte start (used by LBBO/SBBO)
      B: prints 'c' or 'b' for CTABLE or REG base in a memory address
+     F: Full 32-bit register.
      H: Higher 16-bits of a const_int operand
      L: Lower 16-bits of a const_int operand
-     N: prints next register (upper 32bits of a 64bit REG couple)
+     N: prints next 32-bit register (upper 32bits of a 64bit REG couple)
      P: prints swapped condition.
      Q: prints swapped and reversed condition.
      R: prints reversed condition.
@@ -1180,6 +1384,8 @@ pru_comparison_str (enum rtx_code cond)
      V: print exact_log2 () of negated const_int operands
      w: Lower 32-bits of a const_int operand
      W: Upper 32-bits of a const_int operand
+     y: print the next 8-bit register (regardless of op size)
+     z: print the second next 8-bit register (regardless of op size)
 */
 static void
 pru_print_operand (FILE *file, rtx op, int letter)
@@ -1221,33 +1427,46 @@ pru_print_operand (FILE *file, rtx op, int letter)
     {
     case REG:
       if (letter == 0)
-      {
-	      fprintf (file, "%s", reg_names[REGNO (op)]);
-	      return;
-      }
+	{
+	  fprintf (file, "%s", pru_asm_regname (op));
+	  return;
+	}
+      else if (letter == 'b')
+	{
+	  gcc_assert (REGNO (op) <= LAST_NONIO_GP_REG);
+	  fprintf (file, "r%d.b%d", REGNO (op) / 4, REGNO (op) % 4);
+	  return;
+	}
+      else if (letter == 'F')
+	{
+	  gcc_assert (REGNO (op) <= LAST_NONIO_GP_REG);
+	  gcc_assert (REGNO (op) % 4 == 0);
+	  fprintf (file, "r%d", REGNO (op) / 4);
+	  return;
+	}
       else if (letter == 'N')
-      {
-	      gcc_assert (REGNO (op) < 29);
-	      fprintf (file, "%s", reg_names[REGNO (op) + 1]);
-	      return;
-      }
-      else if (letter == 'x')
-      {
-	      const int sz = GET_MODE_SIZE (GET_MODE (op));
-	      const char *subreg = (sz == 1) ? ".b0" : ((sz == 2) ? ".w0" : "");
-	      fprintf (file, "%s%s", reg_names[REGNO (op)], subreg);
-	      return;
-      }
-      break;
-
-    case CONST_INT:
-      /* Ignore 'x' for constants so that MD rules can stay simple.  */
-      if (letter == 'x')
 	{
-	  output_addr_const (file, op);
+	  gcc_assert (REGNO (op) <= LAST_NONIO_GP_REG);
+	  gcc_assert (REGNO (op) % 4 == 0);
+	  fprintf (file, "r%d", REGNO (op) / 4 + 1);
+	  return;
+	}
+      else if (letter == 'y')
+	{
+	  gcc_assert (REGNO (op) <= LAST_NONIO_GP_REG - 1);
+	  fprintf (file, "%s", reg_names[REGNO (op) + 1]);
+	  return;
+	}
+      else if (letter == 'z')
+	{
+	  gcc_assert (REGNO (op) <= LAST_NONIO_GP_REG - 2);
+	  fprintf (file, "%s", reg_names[REGNO (op) + 2]);
 	  return;
 	}
-      else if (letter == 'H')
+      break;
+
+    case CONST_INT:
+      if (letter == 'H')
 	{
 	  HOST_WIDE_INT val = INTVAL (op);
 	  val = (val >> 16) & 0xFFFF;
@@ -1263,14 +1482,17 @@ pru_print_operand (FILE *file, rtx op, int letter)
 	}
       else if (letter == 'T')
 	{
-	  HOST_WIDE_INT val = exact_log2 (INTVAL (op) & 0xffffffff);
+	  /* The predicate should have already validated the 1-high-bit
+	     requirement. Use CTZ here to deal with constant's sign
+	     extension.  */
+	  HOST_WIDE_INT val = wi::ctz (INTVAL (op));
 	  gcc_assert (val >= 0 && val <= 31);
 	  output_addr_const (file, gen_int_mode (val, SImode));
 	  return;
 	}
       else if (letter == 'V')
 	{
-	  HOST_WIDE_INT val = exact_log2 (~INTVAL (op) & 0xffffffff);
+	  HOST_WIDE_INT val = wi::ctz (~INTVAL (op));
 	  gcc_assert (val >= 0 && val <= 31);
 	  output_addr_const (file, gen_int_mode (val, SImode));
 	  return;
@@ -1292,7 +1514,6 @@ pru_print_operand (FILE *file, rtx op, int letter)
     case CONST:
     case LABEL_REF:
     case SYMBOL_REF:
-    case CONST_DOUBLE:
       if (letter == 0)
 	{
 	  output_addr_const (file, op);
@@ -1300,6 +1521,41 @@ pru_print_operand (FILE *file, rtx op, int letter)
 	}
       break;
 
+    case CONST_FIXED:
+	{
+	  HOST_WIDE_INT ival = INTVAL (pru_to_int_mode (op));
+	  if (letter != 0)
+	    output_operand_lossage ("Unsupported code '%c' for fixed-point:",
+				    letter);
+	  fprintf (file, HOST_WIDE_INT_PRINT_DEC, ival);
+	  return;
+	}
+      break;
+
+    case CONST_DOUBLE:
+      if (letter == 0)
+	{
+	  long val;
+
+	  if (GET_MODE (op) != SFmode)
+	    fatal_insn ("internal compiler error.  Unknown mode:", op);
+	  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), val);
+	  fprintf (file, "0x%lx", val);
+	  return;
+	}
+      else if (letter == 'w' || letter == 'W')
+	{
+	  long t[2];
+	  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (op), t);
+	  fprintf (file, "0x%lx", t[letter == 'w' ? 0 : 1]);
+	  return;
+	}
+      else
+	{
+	  gcc_unreachable ();
+	}
+      break;
+
     case SUBREG:
     case MEM:
       if (letter == 0)
@@ -1316,7 +1572,7 @@ pru_print_operand (FILE *file, rtx op, int letter)
 	      rtx op1 = XEXP (base, 1);
 
 	      /* PLUS cannot have two constant operands, so one
-		 of them must be a REG, hence we must check for an
+		 of them mu't be a REG, hence we must check for an
 		 exact base address.  */
 	      if (ctable_base_operand (op0, VOIDmode)
 		  || ctable_base_operand (op1, VOIDmode))
@@ -1400,41 +1656,38 @@ pru_print_operand_address (FILE *file, machine_mode mode, rtx op)
 	if (REG_P (op0) && CONST_INT_P (op1)
 	    && (base = pru_get_ctable_exact_base_index (INTVAL (op1))) >= 0)
 	  {
-	    fprintf (file, "%d, %s", base, reg_names[REGNO (op0)]);
+	    fprintf (file, "%d, %s", base, pru_asm_regname (op0));
 	    return;
 	  }
 	else if (REG_P (op1) && CONST_INT_P (op0)
 		 && (base = pru_get_ctable_exact_base_index (INTVAL (op0))) >= 0)
 	  {
-	    fprintf (file, "%d, %s", base, reg_names[REGNO (op1)]);
+	    fprintf (file, "%d, %s", base, pru_asm_regname (op1));
 	    return;
 	  }
 	else if (REG_P (op0) && CONSTANT_P (op1))
 	  {
-	    fprintf (file, "%s, ", reg_names[REGNO (op0)]);
+	    fprintf (file, "%s, ", pru_asm_regname (op0));
 	    output_addr_const (file, op1);
 	    return;
 	  }
 	else if (REG_P (op1) && CONSTANT_P (op0))
 	  {
-	    fprintf (file, "%s, ", reg_names[REGNO (op1)]);
+	    fprintf (file, "%s, ", pru_asm_regname (op1));
 	    output_addr_const (file, op0);
 	    return;
 	  }
 	else if (REG_P (op1) && REG_P (op0))
 	  {
-	    const int sz1 = GET_MODE_SIZE (GET_MODE (op1));
-	    const char *sub1 = (sz1 == 1) ? ".b0" : ((sz1 == 2) ? ".w0" : "");
-	    fprintf (file, "%s, %s%s", reg_names[REGNO (op0)],
-				       reg_names[REGNO (op1)],
-				       sub1);
+	    fprintf (file, "%s, %s", pru_asm_regname (op0),
+				     pru_asm_regname (op1));
 	    return;
 	  }
       }
       break;
 
     case REG:
-      fprintf (file, "%s, 0", reg_names[REGNO (op)]);
+      fprintf (file, "%s, 0", pru_asm_regname (op));
       return;
 
     case MEM:
@@ -1454,7 +1707,7 @@ pru_print_operand_address (FILE *file, machine_mode mode, rtx op)
 
 /* Implement TARGET_ASM_FUNCTION_PROLOGUE.  */
 static void
-pru_asm_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)
+pru_asm_function_prologue (FILE *file)
 {
   if (flag_verbose_asm || flag_debug_asm)
     {
@@ -1499,6 +1752,83 @@ pru_file_start (void)
 
 /* Function argument related.  */
 
+static int
+pru_function_arg_size (machine_mode mode, const_tree type)
+{
+  HOST_WIDE_INT param_size;
+
+  if (mode == BLKmode)
+      param_size = int_size_in_bytes (type);
+  else
+    param_size = GET_MODE_SIZE (mode);
+
+  /* Convert to words (round up).  */
+  param_size = (UNITS_PER_WORD - 1 + param_size) / UNITS_PER_WORD;
+  gcc_assert (param_size >= 0);
+
+  return param_size;
+}
+
+
+static int
+pru_function_arg_regi (cumulative_args_t cum_v,
+		       machine_mode mode, const_tree type,
+		       bool named)
+{
+  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);
+  size_t argsize = pru_function_arg_size (mode, type);
+  size_t i, bi;
+  int regi = -1;
+
+  /* Arguments larger than 64bits are passed on stack.  */
+  if (argsize > GET_MODE_SIZE (DImode))
+    return -1;
+
+  if (!named)
+    return -1;
+
+  /* Find the first available slot that fits. Yes, that's the PRU ABI.  */
+  for (i = 0; regi < 0 && i < ARRAY_SIZE(cum->regs_used); i++) {
+      /* Ensure SI and DI arguments are stored in full registers only.  */
+      if ((argsize >= 4) && (i % 4) != 0)
+	continue;
+      /* rX.w0/w1/w2 are OK. But avoid spreading the second byte
+         into a different full register.  */
+      if (argsize == 2 && (i % 4) == 3)
+	continue;
+
+      for (bi = 0; bi < argsize && (bi + i) < ARRAY_SIZE(cum->regs_used); bi++) {
+	  if (cum->regs_used[bi + i])
+	    break;
+      }
+      if (bi == argsize)
+	regi = FIRST_ARG_REGNO + i;
+  }
+
+  return regi;
+}
+
+static void
+pru_function_arg_regi_mark_slot (int regi,
+				 cumulative_args_t cum_v,
+				 machine_mode mode, const_tree type,
+				 bool named)
+{
+  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);
+  HOST_WIDE_INT param_size = pru_function_arg_size (mode, type);
+
+  gcc_assert (named);
+
+  /* Mark all byte sub-registers occupied by argument as used.  */
+  while (param_size--)
+    {
+      gcc_assert (regi >= FIRST_ARG_REGNO && regi <= LAST_ARG_REGNO);
+      gcc_assert (!cum->regs_used[regi - FIRST_ARG_REGNO]);
+      cum->regs_used[regi - FIRST_ARG_REGNO] = true;
+      regi++;
+    }
+}
+
 /* Define where to put the arguments to a function.  Value is zero to
    push the argument on the stack, or a hard register in which to
    store the argument.
@@ -1514,14 +1844,14 @@ pru_file_start (void)
 
 static rtx
 pru_function_arg (cumulative_args_t cum_v, machine_mode mode,
-		    const_tree type ATTRIBUTE_UNUSED,
-		    bool named ATTRIBUTE_UNUSED)
+		    const_tree type,
+		    bool named)
 {
-  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);
   rtx return_rtx = NULL_RTX;
+  int regi = pru_function_arg_regi (cum_v, mode, type, named);
 
-  if (cum->regs_used < NUM_ARG_REGS)
-    return_rtx = gen_rtx_REG (mode, FIRST_ARG_REGNO + cum->regs_used);
+  if (regi >= 0)
+    return_rtx = gen_rtx_REG (mode, regi);
 
   return return_rtx;
 }
@@ -1531,29 +1861,24 @@ pru_function_arg (cumulative_args_t cum_v, machine_mode mode,
    in memory.  */
 
 static int
-pru_arg_partial_bytes (cumulative_args_t cum_v,
-		       machine_mode mode, tree type ATTRIBUTE_UNUSED,
+pru_arg_partial_bytes (cumulative_args_t cum_v ATTRIBUTE_UNUSED,
+		       machine_mode mode ATTRIBUTE_UNUSED, tree type ATTRIBUTE_UNUSED,
 		       bool named ATTRIBUTE_UNUSED)
 {
-  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);
-  HOST_WIDE_INT param_size;
+  return 0;
 
-  if (mode == BLKmode)
+#if 0
+  int regi = pru_function_arg_regi (cum_v, mode, type, named);
+
+  if (regi >= 0)
     {
-      param_size = int_size_in_bytes (type);
-      gcc_assert (param_size >= 0);
+      return pru_function_arg_size (mode, type);
     }
   else
-    param_size = GET_MODE_SIZE (mode);
-
-  /* Convert to words (round up).  */
-  param_size = (UNITS_PER_WORD - 1 + param_size) / UNITS_PER_WORD;
-
-  if (cum->regs_used < NUM_ARG_REGS
-      && cum->regs_used + param_size > NUM_ARG_REGS)
-    return (NUM_ARG_REGS - cum->regs_used) * UNITS_PER_WORD;
-
-  return 0;
+    {
+      return 0;
+    }
+#endif
 }
 
 /* Update the data in CUM to advance over an argument of mode MODE
@@ -1562,27 +1887,13 @@ pru_arg_partial_bytes (cumulative_args_t cum_v,
 
 static void
 pru_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,
-			    const_tree type ATTRIBUTE_UNUSED,
-			    bool named ATTRIBUTE_UNUSED)
+			    const_tree type,
+			    bool named)
 {
-  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);
-  HOST_WIDE_INT param_size;
-
-  if (mode == BLKmode)
-    {
-      param_size = int_size_in_bytes (type);
-      gcc_assert (param_size >= 0);
-    }
-  else
-    param_size = GET_MODE_SIZE (mode);
-
-  /* Convert to words (round up).  */
-  param_size = (UNITS_PER_WORD - 1 + param_size) / UNITS_PER_WORD;
+  int regi = pru_function_arg_regi (cum_v, mode, type, named);
 
-  if (cum->regs_used + param_size > NUM_ARG_REGS)
-    cum->regs_used = NUM_ARG_REGS;
-  else
-    cum->regs_used += param_size;
+  if (regi >= 0)
+    pru_function_arg_regi_mark_slot (regi, cum_v, mode, type, named);
 }
 
 /* Implement TARGET_FUNCTION_VALUE.  */
@@ -1611,10 +1922,11 @@ pru_function_value_regno_p (const unsigned int regno)
 static bool
 pru_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)
 {
-  return (int_size_in_bytes (type) > (2 * UNITS_PER_WORD)
+  return (int_size_in_bytes (type) > (2 * 4 * UNITS_PER_WORD)
 	  || int_size_in_bytes (type) == -1);
 }
 
+#if 0
 /* TODO: It may be possible to eliminate the copyback and implement
    own va_arg type.  */
 static void
@@ -1647,6 +1959,7 @@ pru_setup_incoming_varargs (cumulative_args_t cum_v,
   if (pret_size)
     *pretend_size = pret_size;
 }
+#endif
 
 /* Implement TARGET_CAN_USE_DOLOOP_P.  */
 
@@ -2392,6 +2705,15 @@ pru_set_current_function (tree fndecl)
 #undef TARGET_CAN_ELIMINATE
 #define TARGET_CAN_ELIMINATE pru_can_eliminate
 
+#undef TARGET_MODES_TIEABLE_P
+#define TARGET_MODES_TIEABLE_P pru_modes_tieable_p
+
+#undef TARGET_HARD_REGNO_MODE_OK
+#define TARGET_HARD_REGNO_MODE_OK pru_hard_regno_mode_ok
+
+#undef  TARGET_HARD_REGNO_SCRATCH_OK
+#define TARGET_HARD_REGNO_SCRATCH_OK pru_hard_regno_scratch_ok
+
 #undef TARGET_FUNCTION_ARG
 #define TARGET_FUNCTION_ARG pru_function_arg
 
@@ -2413,8 +2735,8 @@ pru_set_current_function (tree fndecl)
 #undef TARGET_RETURN_IN_MEMORY
 #define TARGET_RETURN_IN_MEMORY pru_return_in_memory
 
-#undef TARGET_SETUP_INCOMING_VARARGS
-#define TARGET_SETUP_INCOMING_VARARGS pru_setup_incoming_varargs
+//#undef TARGET_SETUP_INCOMING_VARARGS
+//#define TARGET_SETUP_INCOMING_VARARGS pru_setup_incoming_varargs
 
 #undef TARGET_MUST_PASS_IN_STACK
 #define TARGET_MUST_PASS_IN_STACK must_pass_in_stack_var_size
@@ -2452,6 +2774,10 @@ pru_set_current_function (tree fndecl)
 #undef TARGET_INVALID_WITHIN_DOLOOP
 #define TARGET_INVALID_WITHIN_DOLOOP  pru_invalid_within_doloop
 
+/* There are no shared libraries envisioned for PRU.  */
+#undef TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT
+#define TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT hook_bool_void_true
+
 struct gcc_target targetm = TARGET_INITIALIZER;
 
 #include "gt-pru.h"
diff --git a/gcc/config/pru/pru.h b/gcc/config/pru/pru.h
index bb7737ad005..4fe63ba741c 100644
--- a/gcc/config/pru/pru.h
+++ b/gcc/config/pru/pru.h
@@ -36,6 +36,13 @@
 
 #define DRIVER_SELF_SPECS " %{mmcu=*:-specs=device-specs/%*%s %<mmcu=*} "
 
+#undef  CC1PLUS_SPEC
+#define CC1PLUS_SPEC                                    \
+  "%(cc1) "                                             \
+  "%{!frtti:-fno-rtti} "                                \
+  "%{!fenforce-eh-specs:-fno-enforce-eh-specs} "        \
+  "%{!fexceptions:-fno-exceptions} "
+
 #undef  ASM_SPEC
 #define ASM_SPEC				\
   "%{mno-relax:--mno-link-relax} "
@@ -51,6 +58,9 @@
 #undef  ENDFILE_SPEC
 #define ENDFILE_SPEC "-lgloss"
 
+/* No libstdc++ for now.  Empty string doesn't work.  */
+#define LIBSTDCXX "gcc"
+
 /* TI ABI mandates that ELF symbols do not start with any prefix.  */
 #undef USER_LABEL_PREFIX
 #define USER_LABEL_PREFIX ""
@@ -64,17 +74,30 @@
 #define BITS_BIG_ENDIAN 0
 #define BYTES_BIG_ENDIAN 0
 #define WORDS_BIG_ENDIAN 0
-#define BITS_PER_WORD 32
+
+/* PRU is represented in GCC as an 8-bit CPU with fast 16b and 32bb
+   arithmetic.  */
+#define BITS_PER_WORD 8
+
+#ifdef IN_LIBGCC2
+/* This is to get correct SI and DI modes in libgcc2.c (32 and 64 bits).  */
 #define UNITS_PER_WORD 4
+#else
+/* Width of a word, in units (bytes).  */
+#define UNITS_PER_WORD 1
+#endif
+
 #define POINTER_SIZE 32
-#define BIGGEST_ALIGNMENT 32
+#define BIGGEST_ALIGNMENT 8
 #define STRICT_ALIGNMENT 0
-#define FUNCTION_BOUNDARY 32
-#define PARM_BOUNDARY 32
-#define STACK_BOUNDARY 32
-#define PREFERRED_STACK_BOUNDARY 32
+#define FUNCTION_BOUNDARY 8	/* Func pointers are word-addressed.  */
+#define PARM_BOUNDARY 8
+#define STACK_BOUNDARY 8
+#define PREFERRED_STACK_BOUNDARY 8
 #define MAX_FIXED_MODE_SIZE 64
 
+#define POINTERS_EXTEND_UNSIGNED 1
+
 /* Layout of source language data types.  */
 
 #define INT_TYPE_SIZE 32
@@ -99,7 +122,7 @@
    1      r1		  Caller Saved.  Also used as a temporary by function
 			  profiler and function prologue/epilogue.
    2      r2       sp	  Stack Pointer
-   3      r3       ra	  Return Address
+   3*     r3.w0    ra	  Return Address (16-bit)
    4      r4       fp	  Frame Pointer
    5-13   r5-r13	  Callee Saved Registers
    14-29  r14-r29	  Register Arguments.  Caller Saved Registers.
@@ -118,42 +141,56 @@
    The definitions for all the hard register numbers are located in pru.md.
 */
 
-#define FIXED_REGISTERS			      \
-  {					      \
-/*	  +0  1  2  3  4  5  6  7  8  9 */    \
-/*   0 */  0, 0, 1, 1, 0, 0, 0, 0, 0, 0,      \
-/*  10 */  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,      \
-/*  20 */  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,      \
-/*  30 */  1, 1, 1, 1, 1, 1,		      \
+#define FIXED_REGISTERS				\
+  {						\
+/*   0 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1,	\
+/*   4 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*   8 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*  12 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*  16 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*  20 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*  24 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*  28 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1,	\
+/*  32 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1	\
   }
 
 /* Call used == caller saved + fixed regs + args + ret vals.  */
-#define CALL_USED_REGISTERS		      \
-  {					      \
-/*	  +0  1  2  3  4  5  6  7  8  9 */    \
-/*   0 */  1, 1, 1, 1, 0, 0, 0, 0, 0, 0,      \
-/*  10 */  0, 0, 0, 0, 1, 1, 1, 1, 1, 1,      \
-/*  20 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,      \
-/*  30 */  1, 1, 1, 1, 1, 1,		      \
+#define CALL_USED_REGISTERS			\
+  {						\
+/*   0 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,	\
+/*   4 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*   8 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
+/*  12 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1,	\
+/*  16 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,	\
+/*  20 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,	\
+/*  24 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,	\
+/*  28 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,	\
+/*  32 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1	\
   }
 
 /* Try to allocate r14-r29 first.  Use r0 and r1 only if necessary.  */
 
-#define REG_ALLOC_ORDER			      \
-  {					      \
-    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,   \
-    24, 25, 26, 27, 28, 29, 0,  1,	      \
-    5,  6,  7,  8,  9,  10, 11, 12, 13,	      \
-    4,					      \
-    2,  3,				      \
-    30, 31, 32, 33, 34, 35		      \
+#define __pru_REGSEQ(X)  (X) * 4 + 0, (X) * 4 + 1, (X) * 4 + 2, (X) * 4 + 3
+#define REG_ALLOC_ORDER							    \
+  {									    \
+    __pru_REGSEQ(14), __pru_REGSEQ(15), __pru_REGSEQ(16), __pru_REGSEQ(17), \
+    __pru_REGSEQ(18), __pru_REGSEQ(19), __pru_REGSEQ(20), __pru_REGSEQ(21), \
+    __pru_REGSEQ(22), __pru_REGSEQ(23), __pru_REGSEQ(24), __pru_REGSEQ(25), \
+    __pru_REGSEQ(26), __pru_REGSEQ(27), __pru_REGSEQ(28), __pru_REGSEQ(29), \
+									    \
+    __pru_REGSEQ(0), __pru_REGSEQ( 1),					    \
+									    \
+    __pru_REGSEQ( 5), __pru_REGSEQ( 6), __pru_REGSEQ( 7), __pru_REGSEQ( 8), \
+    __pru_REGSEQ( 9), __pru_REGSEQ(10), __pru_REGSEQ(11), __pru_REGSEQ(12), \
+    __pru_REGSEQ(13),							    \
+									    \
+    __pru_REGSEQ(4),							    \
+    __pru_REGSEQ(2), __pru_REGSEQ( 3),					    \
+									    \
+    __pru_REGSEQ(30), __pru_REGSEQ(31), __pru_REGSEQ(32), __pru_REGSEQ(33), \
+    __pru_REGSEQ(34), __pru_REGSEQ(35)					    \
   }
 
-#define MODES_TIEABLE_P(MODE1, MODE2) 1
-#define HARD_REGNO_MODE_OK(REGNO, MODE) 1
-#define HARD_REGNO_NREGS(REGNO, MODE)	      \
-  ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)
-
 /* Register Classes.  */
 
 enum reg_class
@@ -171,19 +208,19 @@ enum reg_class
 #define REG_CLASS_NAMES   \
   {  "NO_REGS",		  \
      "SIB_REGS",	  \
-     "LOOPCNTR_REGS",     \
+     "LOOPCNTR_REGS",	  \
      "GP_REGS",		  \
      "ALL_REGS" }
 
 #define GENERAL_REGS ALL_REGS
 
-#define REG_CLASS_CONTENTS			\
-  {						\
-    /* NO_REGS	      */ { 0, 0},		\
-    /* SIB_REGS	      */ { 0x3fffc001, 0},	\
-    /* LOOPCNTR_REGS  */ { 0, 0x1},		\
-    /* GP_REGS	      */ { ~0, 0},		\
-    /* ALL_REGS	      */ { ~0,~0}		\
+#define REG_CLASS_CONTENTS					\
+  {								\
+    /* NO_REGS	      */ { 0, 0, 0, 0, 0},			\
+    /* SIB_REGS	      */ { 0xf, 0xff000000, ~0, 0xffffff, 0},	\
+    /* LOOPCNTR_REGS  */ { 0, 0, 0, 0, 0xf},			\
+    /* GP_REGS	      */ { ~0, ~0, ~0, ~0, 0},			\
+    /* ALL_REGS	      */ { ~0,~0, ~0, ~0, ~0}			\
   }
 
 
@@ -198,19 +235,22 @@ enum reg_class
 #define CLASS_MAX_NREGS(CLASS, MODE) \
   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)
 
-/* Arbitrarily set to a non-argument register.  */
+/* Arbitrarily set to a non-argument register.  Not defined by TI ABI.  */
 #define STATIC_CHAIN_REGNUM      0	/* r0 */
 
 /* Tests for various kinds of constants used in the PRU port.  */
 #define SHIFT_INT(X) ((X) >= 0 && (X) <= 31)
 
 #define UHWORD_INT(X) (IN_RANGE ((X), 0, 0xffff))
+#define SHWORD_INT(X) (IN_RANGE ((X), -32768, 32767))
 #define UBYTE_INT(X) (IN_RANGE ((X), 0, 0xff))
 
 /* Say that the epilogue uses the return address register.  Note that
    in the case of sibcalls, the values "used by the epilogue" are
    considered live at the start of the called function.  */
-#define EPILOGUE_USES(REGNO) (epilogue_completed && (REGNO) == RA_REGNO)
+#define EPILOGUE_USES(REGNO) (epilogue_completed &&	      \
+			      (((REGNO) == RA_REGNO)	      \
+			       || (REGNO) == (RA_REGNO + 1)))
 
 /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,
    the stack pointer does not matter.  The value is tested only in
@@ -219,6 +259,7 @@ enum reg_class
 
 #define EXIT_IGNORE_STACK 1
 
+/* Trampolines are not supported, but put a define to keep the build.  */
 #define TRAMPOLINE_SIZE 4
 
 /* Stack layout.  */
@@ -228,13 +269,10 @@ enum reg_class
 #define FIRST_PARM_OFFSET(FUNDECL) 0
 
 /* Before the prologue, RA lives in r3.w2.  */
-#define INCOMING_RETURN_ADDR_RTX				    \
-  gen_rtx_LSHIFTRT (SImode, gen_rtx_REG (Pmode, RA_REGNO), GEN_INT (16))
+#define INCOMING_RETURN_ADDR_RTX	gen_rtx_REG (HImode, RA_REGNO)
 
 #define RETURN_ADDR_RTX(C,F) pru_get_return_address (C)
 
-/* FIXME - either fix GCC to use PRU subregisters, or sync with GDB on
-   how to represent them.  */
 #define DWARF_FRAME_RETURN_COLUMN RA_REGNO
 
 /* The CFA includes the pretend args.  */
@@ -252,16 +290,23 @@ enum reg_class
 #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \
   (OFFSET) = pru_initial_elimination_offset ((FROM), (TO))
 
+#define HARD_REGNO_RENAME_OK(OLD_REG, NEW_REG) \
+  pru_hard_regno_rename_ok (OLD_REG, NEW_REG)
+
 /* Calling convention definitions.  */
+#if !defined(IN_LIBGCC2)
+
+#define NUM_ARG_REGS (LAST_ARG_REGNO - FIRST_ARG_REGNO + 1)
+
 typedef struct pru_args
 {
-  int regs_used;
+  bool regs_used[NUM_ARG_REGS];
 } CUMULATIVE_ARGS;
 
-#define NUM_ARG_REGS (LAST_ARG_REGNO - FIRST_ARG_REGNO + 1)
-
-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \
-  do { (CUM).regs_used = 0; } while (0)
+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS)  \
+  do {									  \
+      memset((CUM).regs_used, 0, sizeof((CUM).regs_used));		  \
+  } while (0)
 
 #define FUNCTION_ARG_REGNO_P(REGNO) \
   ((REGNO) >= FIRST_ARG_REGNO && (REGNO) <= LAST_ARG_REGNO)
@@ -279,6 +324,8 @@ typedef struct pru_args
 #define FUNCTION_PROFILER(FILE, LABELNO) \
   pru_function_profiler ((FILE), (LABELNO))
 
+#endif	/* IN_LIBGCC2 */
+
 /* Addressing modes.  */
 
 #define CONSTANT_ADDRESS_P(X) \
@@ -291,8 +338,8 @@ typedef struct pru_args
 #define REGNO_OK_FOR_BASE_P(REGNO) pru_regno_ok_for_base_p ((REGNO), true)
 #define REGNO_OK_FOR_INDEX_P(REGNO) pru_regno_ok_for_index_p ((REGNO), true)
 
-/* Describing Relative Costs of Operations.  */
-#define MOVE_MAX 4
+/* Limited by the insns in pru-ldst-multiple.md.  */
+#define MOVE_MAX 8
 #define SLOW_BYTE_ACCESS 1
 
 /* It is as good to call a constant function address as to call an address
@@ -308,54 +355,94 @@ typedef struct pru_args
 
 #define GLOBAL_ASM_OP "\t.global\t"
 
-#define REGISTER_NAMES \
-  {       \
-    "r0", \
-    "r1", \
-    "sp", \
-    "ra", \
-    "fp", \
-    "r5", \
-    "r6", \
-    "r7", \
-    "r8", \
-    "r9", \
-    "r10", \
-    "r11", \
-    "r12", \
-    "r13", \
-    "r14", \
-    "r15", \
-    "r16", \
-    "r17", \
-    "r18", \
-    "r19", \
-    "r20", \
-    "r21", \
-    "r22", \
-    "r23", \
-    "r24", \
-    "r25", \
-    "r26", \
-    "r27", \
-    "r28", \
-    "r29", \
-    "r30", \
-    "r31", \
-    "loopcntr_reg", \
-    "pc", \
-    "fake_fp", \
-    "fake_ap", \
+#define __pru_name_R(X)  X".b0", X".b1", X".b2", X".b3"
+#define REGISTER_NAMES		  \
+  {				  \
+    __pru_name_R("r0"),		  \
+    __pru_name_R("r1"),		  \
+    __pru_name_R("r2"),		  \
+    __pru_name_R("r3"),		  \
+    __pru_name_R("r4"),		  \
+    __pru_name_R("r5"),		  \
+    __pru_name_R("r6"),		  \
+    __pru_name_R("r7"),		  \
+    __pru_name_R("r8"),		  \
+    __pru_name_R("r9"),		  \
+    __pru_name_R("r10"),	  \
+    __pru_name_R("r11"),	  \
+    __pru_name_R("r12"),	  \
+    __pru_name_R("r13"),	  \
+    __pru_name_R("r14"),	  \
+    __pru_name_R("r15"),	  \
+    __pru_name_R("r16"),	  \
+    __pru_name_R("r17"),	  \
+    __pru_name_R("r18"),	  \
+    __pru_name_R("r19"),	  \
+    __pru_name_R("r20"),	  \
+    __pru_name_R("r21"),	  \
+    __pru_name_R("r22"),	  \
+    __pru_name_R("r23"),	  \
+    __pru_name_R("r24"),	  \
+    __pru_name_R("r25"),	  \
+    __pru_name_R("r26"),	  \
+    __pru_name_R("r27"),	  \
+    __pru_name_R("r28"),	  \
+    __pru_name_R("r29"),	  \
+    __pru_name_R("r30"),	  \
+    __pru_name_R("r31"),	  \
+    __pru_name_R("loopcntr_reg"), \
+    __pru_name_R("pc"),		  \
+    __pru_name_R("fake_fp"),	  \
+    __pru_name_R("fake_ap"),	  \
 }
 
-#define ADDITIONAL_REGISTER_NAMES       \
-{					\
-  {"r2", 2},				\
-  {"r3", 3},				\
-  {"r4", 4},				\
+#define __pru_overlap_R(X)	      \
+  { "r" #X	, X * 4	    ,  4 },   \
+  { "r" #X ".w0", X * 4 + 0 ,  2 },   \
+  { "r" #X ".w1", X * 4 + 1 ,  2 },   \
+  { "r" #X ".w2", X * 4 + 2 ,  2 }
+
+#define OVERLAPPING_REGISTER_NAMES  \
+  {				    \
+    /* Aliases.  */		    \
+    { "sp", 2 * 4, 4 },		    \
+    { "ra", 3 * 4, 2 },		    \
+    { "fp", 4 * 4, 4 },		    \
+    __pru_overlap_R(0),		    \
+    __pru_overlap_R(1),		    \
+    __pru_overlap_R(2),		    \
+    __pru_overlap_R(3),		    \
+    __pru_overlap_R(4),		    \
+    __pru_overlap_R(5),		    \
+    __pru_overlap_R(6),		    \
+    __pru_overlap_R(7),		    \
+    __pru_overlap_R(8),		    \
+    __pru_overlap_R(9),		    \
+    __pru_overlap_R(10),	    \
+    __pru_overlap_R(11),	    \
+    __pru_overlap_R(12),	    \
+    __pru_overlap_R(13),	    \
+    __pru_overlap_R(14),	    \
+    __pru_overlap_R(15),	    \
+    __pru_overlap_R(16),	    \
+    __pru_overlap_R(17),	    \
+    __pru_overlap_R(18),	    \
+    __pru_overlap_R(19),	    \
+    __pru_overlap_R(20),	    \
+    __pru_overlap_R(21),	    \
+    __pru_overlap_R(22),	    \
+    __pru_overlap_R(23),	    \
+    __pru_overlap_R(24),	    \
+    __pru_overlap_R(25),	    \
+    __pru_overlap_R(26),	    \
+    __pru_overlap_R(27),	    \
+    __pru_overlap_R(28),	    \
+    __pru_overlap_R(29),	    \
+    __pru_overlap_R(30),	    \
+    __pru_overlap_R(31),	    \
 }
 
-#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \
+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)				    \
   do									    \
     {									    \
       fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE);    \
@@ -363,7 +450,7 @@ typedef struct pru_args
     }									    \
   while (0)
 
-#define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)\
+#define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)		    \
   do									    \
     {									    \
       fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), STREAM);  \
@@ -425,15 +512,13 @@ do {									\
 
 #define CASE_VECTOR_MODE Pmode
 
-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)	1
-
 /* Jumps are cheap on PRU.  */
 #define LOGICAL_OP_NON_SHORT_CIRCUIT		0
 
-/* Unfortunately the LBBO instruction does not zero-extend data. */
+/* Unfortunately the LBBO instruction does not zero-extend data.  */
 #undef LOAD_EXTEND_OP
 
-/* #define WORD_REGISTER_OPERATIONS		1 */
+#undef WORD_REGISTER_OPERATIONS
 
 #define HAS_LONG_UNCOND_BRANCH			1
 #define HAS_LONG_COND_BRANCH			1
diff --git a/gcc/config/pru/pru.md b/gcc/config/pru/pru.md
index 9431c6c57bb..66b00f96baa 100644
--- a/gcc/config/pru/pru.md
+++ b/gcc/config/pru/pru.md
@@ -22,31 +22,28 @@
 ;; Register numbers.
 (define_constants
   [
-   (FIRST_ARG_REGNO	    14)	; Argument registers.
-   (LAST_ARG_REGNO	    29)	;
-   (FIRST_RETVAL_REGNO	    14)	; Return value registers.
-   (LAST_RETVAL_REGNO	    15)	;
-   (PROLOGUE_TEMP_REGNO	    1)	; Temporary register to use in prologue.
-
-   (RA_REGNO		    3)	; Return address register __container__.
-				; NB! Per TI's ABI, we are using r3.w2, but
-				; PRU GCC does not currently support
-				; sub-hw-registers.
-   (FP_REGNO		    4)	; Frame pointer register.
-   (LAST_NONIO_GP_REG	    29)	; Last non-I/O general purpose register.
-   (LOOPCNTR_REG	    32)	; internal LOOP counter register
-   (LAST_GP_REG		    33)	; Last general purpose register.
+   (FIRST_ARG_REGNO	    56)	; Argument registers.
+   (LAST_ARG_REGNO	    119)	;
+   (FIRST_RETVAL_REGNO	    56)	; Return value registers.
+   (LAST_RETVAL_REGNO	    60)	;
+   (PROLOGUE_TEMP_REGNO	    4)	; Temporary register to use in prologue.
+
+   (RA_REGNO		    14)	; Return address register r3.w2.
+   (FP_REGNO		    16)	; Frame pointer register.
+   (LAST_NONIO_GP_REG	    119)	; Last non-I/O general purpose register.
+   (LOOPCNTR_REG	    128)	; internal LOOP counter register
+   (LAST_GP_REG		    132)	; Last general purpose register.
 
    ;; Target register definitions.
-   (STACK_POINTER_REGNUM	2)
+   (STACK_POINTER_REGNUM	8)
    (HARD_FRAME_POINTER_REGNUM	FP_REGNO)
-   (PC_REGNUM			33)
-   (FRAME_POINTER_REGNUM	34)
-   (ARG_POINTER_REGNUM		35)
-   (FIRST_PSEUDO_REGISTER	36)
+   (PC_REGNUM			132)
+   (FRAME_POINTER_REGNUM	136)
+   (ARG_POINTER_REGNUM		140)
+   (FIRST_PSEUDO_REGISTER	144)
 
    ;; Misc
-   (MAX_XBBO_BURST_LEN	    20)	; Artificially limited by GCC - see how
+   (MAX_XBBO_BURST_LEN	    19)	; Artificially limited by GCC - see how
 				; genextract.c uses 'a'..'z' to record
 				; "path to a vector".
   ]
@@ -86,23 +83,31 @@
 (include "predicates.md")
 (include "constraints.md")
 
-(define_mode_iterator ALL [QI HI SI])
+;; All supported direct move-modes
+(define_mode_iterator MOVMODE [QI QQ UQQ
+                               HI HQ UHQ HA UHA
+                               SI SQ USQ SA USA
+                               SF])
+
+(define_mode_iterator MOV32 [SI SF SD SQ USQ])
+(define_mode_iterator MOV64 [DI DF DD DQ UDQ])
+(define_mode_iterator QISI [QI HI SI])
 (define_mode_iterator HISI [HI SI])
-(define_mode_iterator BIGI [DI TI OI XI])
+(define_mode_iterator QIHI [QI HI])
 
 ;; EQS0/0 for extension source 0/1 and EQD for extension destination patterns.
 (define_mode_iterator EQS0 [QI HI SI])
 (define_mode_iterator EQS1 [QI HI SI])
 (define_mode_iterator EQD [QI HI SI])
 
-; Not recommended.  Please use %x instead!
+; Not recommended.  Please use %0 instead!
 (define_mode_attr regwidth [(QI ".b0") (HI ".w0") (SI "")])
 
 ;; Move instructions
 
 (define_expand "mov<mode>"
-  [(set (match_operand:ALL 0 "nonimmediate_operand" "")
-	(match_operand:ALL 1 "general_operand"       ""))]
+  [(set (match_operand:MOVMODE 0 "nonimmediate_operand" "")
+	(match_operand:MOVMODE 1 "general_operand"       ""))]
   ""
   "
   {
@@ -118,13 +123,13 @@
 ;; Leave mem and reg operands in the same insn.  Otherwise LRA gets
 ;; confused, and gcc.target/pru/pr64366.c triggers infinite loops in reload.
 (define_insn "prumov<mode>"
-  [(set (match_operand:ALL 0 "nonimmediate_operand" "=m,r,r")
-	(match_operand:ALL 1 "nonimmediate_operand" "r,m,r"))]
+  [(set (match_operand:MOVMODE 0 "nonimmediate_operand" "=m,r,r")
+	(match_operand:MOVMODE 1 "nonimmediate_operand" "r,m,r"))]
   ""
   "@
-    sb%B0o\\t%1, %0, %S0
-    lb%B1o\\t%0, %1, %S1
-    mov\\t%x0, %x1"
+    sb%B0o\\t%b1, %0, %S0
+    lb%B1o\\t%b0, %1, %S1
+    mov\\t%0, %1"
   [(set_attr "type" "st,ld,alu")
    (set_attr "length" "4,4,4")])
 
@@ -136,13 +141,24 @@
 ;;
 ;; Note: Assume that Program Mem (T constraint) can fit in 16 bits!
 (define_insn "prumov_ldi<mode>"
-  [(set (match_operand:ALL 0 "register_operand"	      "=r,r,r")
-	(match_operand:ALL 1 "immediate_operand"       "T,J,i"))]
+  [(set (match_operand:QIHI 0 "register_operand"	"=r,r,r")
+	(match_operand:QIHI 1 "immediate_operand"       "T,J,N"))]
+  ""
+  "@
+    ldi\\t%0, %%pmem(%1)
+    ldi\\t%0, %1
+    ldi\\t%0, (%1) & 0xffff"
+  [(set_attr "type" "alu,alu,alu")
+   (set_attr "length" "4,4,4")])
+
+(define_insn "prumov_ldisisf<mode>"
+  [(set (match_operand:MOV32 0 "register_operand"	 "=r,r,r")
+	(match_operand:MOV32 1 "immediate_operand"       "T,J,iF"))]
   ""
   "@
-    ldi\\t%x0, %%pmem(%1)
-    ldi\\t%x0, %1
-    ldi32\\t%0, %1"
+    ldi\\t%F0, %%pmem(%1)
+    ldi\\t%F0, %1
+    ldi32\\t%F0, %1"
   [(set_attr "type" "alu,alu,alu")
    (set_attr "length" "4,4,8")])
 
@@ -154,31 +170,31 @@
 ; Forcing DI reg alignment (akin to microblaze's HARD_REGNO_MODE_OK)
 ; does not seem efficient, and might get in the way in future work
 ; on register packing.
-(define_insn "movdi"
-  [(set (match_operand:DI 0 "nonimmediate_operand" "=m,r,r,r,r,r")
-	(match_operand:DI 1 "general_operand"       "r,m,r,T,J,n"))]
+(define_insn "mov<mode>"
+  [(set (match_operand:MOV64 0 "nonimmediate_operand" "=m,r,r,r,r,r")
+	(match_operand:MOV64 1 "general_operand"       "r,m,r,T,J,nF"))]
   ""
   {
     switch (which_alternative)
     {
       case 0:
-	return "sb%B0o\\t%1, %0, %S0";
+	return "sb%B0o\\t%b1, %0, %S0";
       case 1:
-	return "lb%B1o\\t%0, %1, %S1";
+	return "lb%B1o\\t%b0, %1, %S1";
       case 2:
 	/* careful with overlapping source and destination regs.  */
 	gcc_assert (GP_REG_P (REGNO (operands[0])));
 	gcc_assert (GP_REG_P (REGNO (operands[1])));
-	if (REGNO (operands[0]) == (REGNO (operands[1]) + 1))
-	  return "mov\\t%N0, %N1\;mov\\t%0, %1";
+	if (REGNO (operands[0]) == (REGNO (operands[1]) + 4))
+	  return "mov\\t%N0, %N1\;mov\\t%F0, %F1";
 	else
-	  return "mov\\t%0, %1\;mov\\t%N0, %N1";
+	  return "mov\\t%F0, %F1\;mov\\t%N0, %N1";
       case 3:
-	return "ldi\\t%0, %%pmem(%1)\;ldi\\t%N0, 0";
+	return "ldi\\t%F0, %%pmem(%1)\;ldi\\t%N0, 0";
       case 4:
-	return "ldi\\t%0, %1\;ldi\\t%N0, 0";
+	return "ldi\\t%F0, %1\;ldi\\t%N0, 0";
       case 5:
-	return "ldi32\\t%0, %w1\;"
+	return "ldi32\\t%F0, %w1\;"
 	       "ldi32\\t%N0, %W1";
       default:
 	gcc_unreachable ();
@@ -192,7 +208,7 @@
 ;;   op1: first memory location
 ;;   op2: number of consecutive registers
 (define_expand "load_multiple"
-  [(match_par_dup 3 [(set (match_operand:SI 0 "" "")
+  [(match_par_dup 3 [(set (match_operand:QI 0 "" "")
 			  (match_operand:SI 1 "" ""))
 		     (use (match_operand:SI 2 "" ""))])]
   ""
@@ -217,8 +233,8 @@
 
   for (i = 0; i < count; i++)
     XVECEXP (operands[3], 0, i)
-      = gen_rtx_SET (gen_rtx_REG (SImode, first_regno + i),
-		     gen_rtx_MEM (SImode,
+      = gen_rtx_SET (gen_rtx_REG (QImode, first_regno + i),
+		     gen_rtx_MEM (QImode,
 				  plus_constant (Pmode,
 						 XEXP (operands[1], 0),
 						 i * UNITS_PER_WORD)));
@@ -229,8 +245,8 @@
 ;;   op1: first of the consecutive registers
 ;;   op2: number of consecutive registers
 (define_expand "store_multiple"
-  [(match_par_dup 3 [(set (match_operand:SI 0 "" "")
-			  (match_operand:SI 1 "" ""))
+  [(match_par_dup 3 [(set (match_operand:QI 0 "" "")
+			  (match_operand:QI 1 "" ""))
 		     (use (match_operand:SI 2 "" ""))])]
   ""
   "
@@ -254,11 +270,11 @@
 
   for (i = 0; i < count; i++)
     XVECEXP (operands[3], 0, i)
-      = gen_rtx_SET (gen_rtx_MEM (SImode,
+      = gen_rtx_SET (gen_rtx_MEM (QImode,
 				  plus_constant (Pmode,
 						 XEXP (operands[0], 0),
 						 i * UNITS_PER_WORD)),
-		     gen_rtx_REG (SImode, first_regno + i));
+		     gen_rtx_REG (QImode, first_regno + i));
 }")
 
 ;; Include the machine-generated patterns for all LBBO/SBBO multuple-reg
@@ -283,7 +299,7 @@
   [(set (match_operand:EQD 0 "register_operand" "=r")
 	(zero_extend:EQD (match_operand:EQS0 1 "register_operand" "r")))]
   ""
-  "mov\\t%x0, %x1"
+  "mov\\t%0, %1"
   [(set_attr "type"     "alu")])
 
 ;; Sign extension patterns.  We have to emulate them due to lack of
@@ -299,12 +315,30 @@
   [(set_attr "type" "complex")
    (set_attr "length" "12")])
 
+;; Bit extraction
+;; We define it solely to allow combine to choose SImode
+;; for word mode when trying to match our cbranch_qbbx_* insn.
+;;
+;; Check how combine.c:make_extraction() uses
+;; get_best_reg_extraction_insn() to select the op size.
+(define_insn "extzv<mode>"
+  [(set (match_operand:QISI 0 "register_operand" "=r")
+        (zero_extract:QISI (match_operand:QISI 1 "register_operand" "r")
+                      (match_operand:QISI 2 "const_int_operand" "i")
+                      (match_operand:QISI 3 "const_int_operand" "i")))]
+  ""
+  "lsl\\t%0, %1, (%S0 * 8 - %2 - %3)\;lsr\\t%0, %0, (%S0 * 8 - %2)"
+  [(set_attr "type" "complex")
+   (set_attr "length" "8")])
+
+
+
 ;; Arithmetic Operations
 
-(define_expand "addsi3"
-  [(set (match_operand:SI 0 "register_operand"		  "=r,r,r")
-	(plus:SI (match_operand:SI 1 "register_operand"   "%r,r,r")
-		 (match_operand:SI 2 "nonmemory_operand"  "r,I,M")))]
+(define_expand "add<mode>3"
+  [(set (match_operand:QISI 0 "register_operand"		  "=r,r,r")
+	(plus:QISI (match_operand:QISI 1 "register_operand"   "%r,r,r")
+		 (match_operand:QISI 2 "nonmemory_operand"  "r,I,M")))]
   ""
   ""
   [(set_attr "type" "alu")])
@@ -315,16 +349,16 @@
 		 (match_operand:DI 2 "reg_or_ubyte_operand" "r,I,M")))]
   ""
   "@
-   add\\t%0, %1, %2\;adc\\t%N0, %N1, %N2
-   add\\t%0, %1, %2\;adc\\t%N0, %N1, 0
-   sub\\t%0, %1, %n2\;suc\\t%N0, %N1, 0"
+   add\\t%F0, %F1, %F2\;adc\\t%N0, %N1, %N2
+   add\\t%F0, %F1, %2\;adc\\t%N0, %N1, 0
+   sub\\t%F0, %F1, %n2\;suc\\t%N0, %N1, 0"
   [(set_attr "type" "alu,alu,alu")
    (set_attr "length" "8,8,8")])
 
-(define_expand "subsi3"
-  [(set (match_operand:SI 0 "register_operand"		      "=r,r,r")
-	(minus:SI (match_operand:SI 1 "reg_or_ubyte_operand"  "r,r,I")
-		  (match_operand:SI 2 "reg_or_ubyte_operand"  "r,I,r")))]
+(define_expand "sub<mode>3"
+  [(set (match_operand:QISI 0 "register_operand"		      "=r,r,r")
+	(minus:QISI (match_operand:QISI 1 "reg_or_ubyte_operand"  "r,r,I")
+		  (match_operand:QISI 2 "reg_or_ubyte_operand"  "r,I,r")))]
   ""
   ""
   [(set_attr "type" "alu")])
@@ -335,24 +369,24 @@
 		 (match_operand:DI 2 "reg_or_ubyte_operand" "r,I,r")))]
   ""
   "@
-   sub\\t%0, %1, %2\;suc\\t%N0, %N1, %N2
-   sub\\t%0, %1, %2\;suc\\t%N0, %N1, 0
-   rsb\\t%0, %2, %1\;rsc\\t%N0, %N2, 0"
+   sub\\t%F0, %F1, %F2\;suc\\t%N0, %N1, %N2
+   sub\\t%F0, %F1, %2\;suc\\t%N0, %N1, 0
+   rsb\\t%F0, %F2, %1\;rsc\\t%N0, %N2, 0"
   [(set_attr "type" "alu,alu,alu")
    (set_attr "length" "8,8,8")])
 
 ;;  Negate and ones complement
 
-(define_expand "negsi2"
-  [(set (match_operand:SI 0 "register_operand"		"=r")
-	(neg:SI (match_operand:SI 1 "register_operand"	"r")))]
+(define_expand "neg<mode>2"
+  [(set (match_operand:QISI 0 "register_operand"		"=r")
+	(neg:QISI (match_operand:QISI 1 "register_operand"	"r")))]
   ""
   ""
   [(set_attr "type" "alu")])
 
-(define_expand "one_cmplsi2"
-  [(set (match_operand:SI 0 "register_operand"		"=r")
-	(not:SI (match_operand:SI 1 "register_operand"	"r")))]
+(define_expand "one_cmpl<mode>2"
+  [(set (match_operand:QISI 0 "register_operand"		"=r")
+	(not:QISI (match_operand:QISI 1 "register_operand"	"r")))]
   ""
   ""
   [(set_attr "type" "alu")])
@@ -365,10 +399,13 @@
 (define_code_iterator LOGICAL [and ior xor umin umax])
 (define_code_attr logical_asm [(and "and") (ior "or") (xor "xor") (umin "min") (umax "max")])
 
-(define_expand "<code>si3"
-  [(set (match_operand:SI 0 "register_operand"			"=r")
-	(LOGICAL:SI (match_operand:SI 1 "register_operand"	"%r")
-		    (match_operand:SI 2 "reg_or_ubyte_operand"	"rI")))]
+(define_code_iterator LOGICAL_BITOP [and ior xor])
+(define_code_attr logical_bitop_asm [(and "and") (ior "or") (xor "xor")])
+
+(define_expand "<code><mode>3"
+  [(set (match_operand:QISI 0 "register_operand"			"=r")
+	(LOGICAL:QISI (match_operand:QISI 1 "register_operand"	"%r")
+		    (match_operand:QISI 2 "reg_or_ubyte_operand"	"rI")))]
   ""
   ""
   [(set_attr "type" "alu")])
@@ -387,8 +424,9 @@
 	    (match_operand:SI 2 "register_operand"  "rI"))
 	  0)))]
  ""
- "and\\t%x0, %x1, %2<EQD:regwidth>"
+ "and\\t%0, %1, %F2<EQD:regwidth>"
  [(set_attr "type" "alu")])
+
 
 ;;  Shift instructions
 
@@ -396,33 +434,63 @@
 (define_code_attr shift_op   [(ashift "ashl") (lshiftrt "lshr")])
 (define_code_attr shift_asm  [(ashift "lsl") (lshiftrt "lsr")])
 
-(define_expand "<shift_op>si3"
-  [(set (match_operand:SI 0 "register_operand"		  "=r")
-	(SHIFT:SI (match_operand:SI 1 "register_operand"  "r")
-		  (match_operand:SI 2 "shift_operand"	  "rL")))]
+(define_expand "<shift_op><mode>3"
+  [(set (match_operand:QISI 0 "register_operand"		  "=r")
+	(SHIFT:QISI (match_operand:QISI 1 "register_operand"  "r")
+		  (match_operand:QISI 2 "shift_operand"	  "rL")))]
   ""
   ""
   [(set_attr "type" "shift")])
 
 ; LRA cannot cope with clobbered op2, hence the scratch register.
 (define_insn "ashr<mode>3"
-  [(set (match_operand:ALL 0 "register_operand" "=&r,r")
-        (ashiftrt:ALL
-          (match_operand:ALL 1 "register_operand" "0,r")
-          (match_operand:ALL 2 "reg_or_const_1_operand" "r,P")))
-    (clobber (match_scratch:ALL 3 "=r,X"))]
+  [(set (match_operand:QISI 0 "register_operand" "=&r,r")
+        (ashiftrt:QISI
+          (match_operand:QISI 1 "register_operand" "0,r")
+          (match_operand:QISI 2 "reg_or_const_1_operand" "r,P")))
+    (clobber (match_scratch:QISI 3 "=r,X"))]
   ""
   "@
-   mov %x3, %x2\;ASHRLP%=:\;qbeq ASHREND%=, %x3, 0\; sub %x3, %x3, 1\; lsr\\t%x0, %x0, 1\; qbbc ASHRLP%=, %x0, (%S0 * 8) - 2\; set %x0, %x0, (%S0 * 8) - 1\; jmp ASHRLP%=\;ASHREND%=:
-   lsr\\t%x0, %x1, 1\;qbbc LSIGN%=, %x0, (%S0 * 8) - 2\;set %x0, %x0, (%S0 * 8) - 1\;LSIGN%=:"
+   mov %3, %2\;ASHRLP%=:\;qbeq ASHREND%=, %3, 0\; sub %3, %3, 1\; lsr\\t%0, %0, 1\; qbbc ASHRLP%=, %0, (%S0 * 8) - 2\; set %0, %0, (%S0 * 8) - 1\; jmp ASHRLP%=\;ASHREND%=:
+   lsr\\t%0, %1, 1\;qbbc LSIGN%=, %0, (%S0 * 8) - 2\;set %0, %0, (%S0 * 8) - 1\;LSIGN%=:"
   [(set_attr "type" "complex,alu")
    (set_attr "length" "28,4")])
 
 
 ;; Include ALU patterns with zero-extension of operands.  That's where
 ;; the real insns are defined.
+
 (include "alu-zext.md")
 
+(define_insn "<code>di3"
+  [(set (match_operand:DI 0 "register_operand" "=&r,&r")
+        (LOGICAL_BITOP:DI
+          (match_operand:DI 1 "register_operand"     "%r,r")
+          (match_operand:DI 2 "reg_or_ubyte_operand"  "r,I")))]
+  ""
+  "@
+   <logical_bitop_asm>\\t%F0, %F1, %F2\;<logical_asm>\\t%N0, %N1, %N2
+   <logical_bitop_asm>\\t%F0, %F1, %2\;<logical_asm>\\t%N0, %N1, 0"
+  [(set_attr "type" "alu,alu")
+   (set_attr "length" "8,8")])
+
+
+(define_insn "one_cmpldi2"
+  [(set (match_operand:DI 0 "register_operand"		"=r")
+	(not:DI (match_operand:DI 1 "register_operand"	"r")))]
+  ""
+  {
+    /* careful with overlapping source and destination regs.  */
+    gcc_assert (GP_REG_P (REGNO (operands[0])));
+    gcc_assert (GP_REG_P (REGNO (operands[1])));
+    if (REGNO (operands[0]) == (REGNO (operands[1]) + 4))
+      return "not\\t%N0, %N1\;not\\t%F0, %F1";
+    else
+      return "not\\t%F0, %F1\;not\\t%N0, %N1";
+  }
+  [(set_attr "type" "alu")
+   (set_attr "length" "8")])
+
 ;; Multiply instruction.  Idea for fixing registers comes from the AVR backend.
 
 (define_expand "mulsi3"
@@ -437,20 +505,20 @@
 
 
 (define_expand "mulsi3_fixinp"
-  [(set (reg:SI 28) (match_operand:SI 1 "register_operand" ""))
-   (set (reg:SI 29) (match_operand:SI 2 "register_operand" ""))
-   (parallel [(set (reg:SI 26) (mult:SI (reg:SI 28) (reg:SI 29)))
-	      (clobber (reg:SI 25))
-	      (clobber (reg:SI 27))])
-   (set (match_operand:QI 0 "register_operand" "") (reg:SI 26))]
+  [(set (reg:SI 112) (match_operand:SI 1 "register_operand" ""))
+   (set (reg:SI 116) (match_operand:SI 2 "register_operand" ""))
+   (parallel [(set (reg:SI 104) (mult:SI (reg:SI 112) (reg:SI 116)))
+	      (clobber (reg:SI 100))
+	      (clobber (reg:SI 108))])
+   (set (match_operand:QI 0 "register_operand" "") (reg:SI 104))]
   ""
   {
   })
 
 (define_insn "*mulsi3_prumac"
-  [(set (reg:SI 26) (mult:SI (reg:SI 28) (reg:SI 29)))
-   (clobber (reg:SI 25))
-   (clobber (reg:SI 27))]
+  [(set (reg:SI 104) (mult:SI (reg:SI 112) (reg:SI 116)))
+   (clobber (reg:SI 100))
+   (clobber (reg:SI 108))]
   ""
   "ldi\\tr25, 0\;xout\\t0, r25, 1\;xin\\t0, r26, 8"
   [(set_attr "type" "alu")
@@ -508,7 +576,7 @@
 (define_insn "indirect_jump"
   [(set (pc) (match_operand:SI 0 "register_operand" "r"))]
   ""
-  "jmp\\t%x0"
+  "jmp\\t%0"
   [(set_attr "type" "control")])
 
 (define_insn "jump"
@@ -542,7 +610,7 @@
   ""
   "@
     call\\t%%label(%0)
-    call\\t%x0"
+    call\\t%0"
   [(set_attr "type" "control")])
 
 (define_insn "*call_value"
@@ -553,7 +621,7 @@
   ""
   "@
     call\\t%%label(%1)
-    call\\t%x1"
+    call\\t%1"
   [(set_attr "type" "control")])
 
 (define_expand "sibcall"
@@ -578,7 +646,7 @@
   "SIBLING_CALL_P (insn)"
   "@
     jmp\\t%%label(%0)
-    jmp\\t%x0"
+    jmp\\t%0"
   [(set_attr "type" "control")])
 
 (define_insn "*sibcall_value"
@@ -589,7 +657,7 @@
   "SIBLING_CALL_P (insn)"
   "@
     jmp\\t%%label(%1)
-    jmp\\t%x1"
+    jmp\\t%1"
   [(set_attr "type" "control")])
 
 (define_insn "*tablejump"
@@ -597,7 +665,7 @@
 	(match_operand:SI 0 "register_operand" "r"))
    (use (label_ref (match_operand 1 "" "")))]
   ""
-  "jmp\\t%x0"
+  "jmp\\t%0"
   [(set_attr "type" "control")])
 
 ;; cbranch pattern.
@@ -610,8 +678,8 @@
   [(set (pc)
      (if_then_else
        (match_operator 0 "ordered_comparison_operator"
-	 [(match_operand:ALL 1 "register_operand" "r,r,r")
-	  (match_operand:ALL 2 "reg_or_ubyte_operand" "r,Z,I")])
+	 [(match_operand:QISI 1 "register_operand" "r,r,r")
+	  (match_operand:QISI 2 "reg_or_ubyte_operand" "r,Z,I")])
        (label_ref (match_operand 3 "" ""))
        (pc)))]
   ""
@@ -634,9 +702,9 @@
     {
       /* PRU demands OP1 to be immediate, so swap operands.  */
       if (is_near)
-	return "qb%P0\t%l3, %x1, %x2";
+	return "qb%P0\t%l3, %1, %2";
       else
-	return "qb%Q0\t.+8, %x1, %x2\;jmp\t%%label(%l3)";
+	return "qb%Q0\t.+8, %1, %2\;jmp\t%%label(%l3)";
     }
 }
   [(set_attr "type" "control")
@@ -661,10 +729,10 @@
 (define_code_attr qbbx_op   [(eq "qbbc") (ne "qbbs")])
 (define_code_attr qbbx_negop   [(eq "qbbs") (ne "qbbc")])
 
-(define_insn "cbranch_qbbx_<BIT_TEST:code><EQS0:mode><EQS1:mode>4"
+(define_insn "cbranch_qbbx_<BIT_TEST:code><EQS0:mode><EQS1:mode><EQD:mode>4"
  [(set (pc)
    (if_then_else
-    (BIT_TEST (zero_extract:SI
+    (BIT_TEST (zero_extract:EQD
 	 (match_operand:EQS0 0 "register_operand" "r")
 	 (const_int 1)
 	 (match_operand:EQS1 1 "reg_or_ubyte_operand" "rI"))
@@ -676,9 +744,9 @@
   const int length = (get_attr_length (insn));
   const bool is_near = (length == 4);
   if (is_near)
-    return "<BIT_TEST:qbbx_op>\\t%l2, %x0, %x1";
+    return "<BIT_TEST:qbbx_op>\\t%l2, %0, %1";
   else
-    return "<BIT_TEST:qbbx_negop>\\t.+8, %x0, %x1\;jmp\\t%%label(%l2)";
+    return "<BIT_TEST:qbbx_negop>\\t.+8, %0, %1\;jmp\\t%%label(%l2)";
 }
   [(set_attr "type" "control")
    (set (attr "length")
@@ -758,7 +826,7 @@
 		    (label_ref (match_operand 1 "" ""))]
 		   UNSPECV_LOOP_BEGIN))]
   ""
-  "loop\\t%l1, %x0"
+  "loop\\t%l1, %0"
   [(set_attr "length" "4")])
 
 (define_insn "pruloop_end"
diff --git a/gcc/testsuite/gcc.target/pru/ashiftrt.c b/gcc/testsuite/gcc.target/pru/ashiftrt.c
new file mode 100644
index 00000000000..ee8d55d60e6
--- /dev/null
+++ b/gcc/testsuite/gcc.target/pru/ashiftrt.c
@@ -0,0 +1,13 @@
+/* Test shift optimization */
+
+/* { dg-options "-O1" } */
+
+/* -O1 in the options is significant.  */
+
+extern void func2(unsigned char);
+
+void test(unsigned char v)
+{
+    /* { dg-final { scan-assembler "lsl\tr14.b0, r14.b0, .\+\n\tlsr\tr14.b0, r14.b0" } } */
+    func2((v & 2) ? 1 : 0);
+}
diff --git a/gcc/testsuite/gcc.target/pru/pragma-ctable_entry.c b/gcc/testsuite/gcc.target/pru/pragma-ctable_entry.c
index 5a7cef6891e..2c5ea375505 100644
--- a/gcc/testsuite/gcc.target/pru/pragma-ctable_entry.c
+++ b/gcc/testsuite/gcc.target/pru/pragma-ctable_entry.c
@@ -17,6 +17,6 @@ test_ctable (unsigned int val1, unsigned int val2)
   return ((volatile unsigned int *)0x48040000)[4];
 }
 
-/* { dg-final { scan-assembler "sbco\\tr15, 12, 0, 2" } } */
-/* { dg-final { scan-assembler "sbco\\tr15, 12, r14, 4" } } */
-/* { dg-final { scan-assembler "lbco\\tr14, 12, 16, 4" } } */
+/* { dg-final { scan-assembler "sbco\\tr15.b\[012\]?, 12, 0, 2" } } */
+/* { dg-final { scan-assembler "sbco\\tr15.b0, 12, r14, 4" } } */
+/* { dg-final { scan-assembler "lbco\\tr14.b0, 12, 16, 4" } } */
diff --git a/gcc/testsuite/gcc.target/pru/qbbc-3.c b/gcc/testsuite/gcc.target/pru/qbbc-3.c
new file mode 100644
index 00000000000..7fb7e1a9742
--- /dev/null
+++ b/gcc/testsuite/gcc.target/pru/qbbc-3.c
@@ -0,0 +1,15 @@
+/* Test QBBC recognition */
+
+/* { dg-options "-O1" } */
+
+/* -O1 in the options is significant.  Without it bit-check-and-branch
+   operation may not be optimized to QBBC.  */
+
+unsigned int
+test_qbbc_reg (unsigned int a, unsigned int b, unsigned short val)
+{
+  /* { dg-final { scan-assembler "qbbc\\t.L\[0-9\]*, r16.w0, 12" } } */
+  if (!(val & (1 << 12)))
+    return a;
+  return b;
+}
diff --git a/gcc/testsuite/gcc.target/pru/zero_extend-and-hisi.c b/gcc/testsuite/gcc.target/pru/zero_extend-and-hisi.c
index cc07d2959aa..716043cf071 100644
--- a/gcc/testsuite/gcc.target/pru/zero_extend-and-hisi.c
+++ b/gcc/testsuite/gcc.target/pru/zero_extend-and-hisi.c
@@ -10,7 +10,7 @@
 unsigned int
 test_zext_and_hi (unsigned short val1, unsigned int val2)
 {
-  /* { dg-final { scan-assembler "and\\tr14, r14, r15.w0" } } */
+  /* { dg-final { scan-assembler "and\\tr14, r14.w0, r15" } } */
   return val1 & val2;
 }
 
diff --git a/gcc/testsuite/gcc.target/pru/zero_extend-and-qihi.c b/gcc/testsuite/gcc.target/pru/zero_extend-and-qihi.c
index 9728ba0ff86..06f58459720 100644
--- a/gcc/testsuite/gcc.target/pru/zero_extend-and-qihi.c
+++ b/gcc/testsuite/gcc.target/pru/zero_extend-and-qihi.c
@@ -10,7 +10,7 @@
 unsigned int
 test_zext_and_hi (unsigned char val1, unsigned int val2)
 {
-  /* { dg-final { scan-assembler "and\\tr14, r14, r15.b0" } } */
+  /* { dg-final { scan-assembler "and\\tr14, r14.b0, r15" } } */
   return val1 & val2;
 }
 
diff --git a/gcc/testsuite/gcc.target/pru/zero_extend-and-qisi.c b/gcc/testsuite/gcc.target/pru/zero_extend-and-qisi.c
index 9728ba0ff86..06f58459720 100644
--- a/gcc/testsuite/gcc.target/pru/zero_extend-and-qisi.c
+++ b/gcc/testsuite/gcc.target/pru/zero_extend-and-qisi.c
@@ -10,7 +10,7 @@
 unsigned int
 test_zext_and_hi (unsigned char val1, unsigned int val2)
 {
-  /* { dg-final { scan-assembler "and\\tr14, r14, r15.b0" } } */
+  /* { dg-final { scan-assembler "and\\tr14, r14.b0, r15" } } */
   return val1 & val2;
 }
 
diff --git a/gcc/testsuite/gcc.target/pru/zero_extend-qihi.c b/gcc/testsuite/gcc.target/pru/zero_extend-qihi.c
index 10c32a96743..62e81f8a4cc 100644
--- a/gcc/testsuite/gcc.target/pru/zero_extend-qihi.c
+++ b/gcc/testsuite/gcc.target/pru/zero_extend-qihi.c
@@ -9,35 +9,35 @@
 unsigned int
 test_zext_plus_hi (unsigned char val1, unsigned short val2)
 {
-  /* { dg-final { scan-assembler "add\\tr14, r14.b0, r15.w0" } } */
+  /* { dg-final { scan-assembler "add\\tr14, r14.b0, r14.w1" } } */
   return val1 + val2;
 }
 
 unsigned int
 test_zext_minus_hi (unsigned char val1, unsigned short val2)
 {
-  /* { dg-final { scan-assembler "sub\\tr14, r14.b0, r15.w0" } } */
+  /* { dg-final { scan-assembler "sub\\tr14, r14.b0, r14.w1" } } */
   return val1 - val2;
 }
 
 unsigned int
 test_zext_xor_hi (unsigned char val1, unsigned short val2)
 {
-  /* { dg-final { scan-assembler "xor\\tr14, r14.b0, r15.w0" } } */
+  /* { dg-final { scan-assembler "xor\\tr14, r14.b0, r14.w1" } } */
   return val1 ^ val2;
 }
 
 unsigned int
 test_zext_or_hi (unsigned char val1, unsigned short val2)
 {
-  /* { dg-final { scan-assembler "or\\tr14, r14.b0, r15.w0" } } */
+  /* { dg-final { scan-assembler "or\\tr14, r14.b0, r14.w1" } } */
   return val1 | val2;
 }
 
 unsigned int
 test_zext_ashl_hi (unsigned char val1, unsigned short val2)
 {
-  /* { dg-final { scan-assembler "lsl\\tr14, r14.b0, r15.w0" } } */
+  /* { dg-final { scan-assembler "lsl\\tr14, r14.b0, r14.w1" } } */
   return val1 << val2;
 }
 
-- 
2.11.0

