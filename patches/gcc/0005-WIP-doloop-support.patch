From 81785e4a5e9914979a8d062f8d08e9acb23305f2 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dinuxbg@gmail.com>
Date: Sat, 6 Feb 2016 21:47:44 +0200
Subject: [PATCH 5/5] WIP: doloop support

TODO:
  - Limit register loop counts to 16 bits (PRU HW requirement)
  - Support CONST_UBYTE loop counter init value.
  - Check the "label" counter logic. Other ports are using similar methods,
    but still it seems a non-deterministic.
  - Add appropriate GCC tests

Signed-off-by: Dimitar Dimitrov <dinuxbg@gmail.com>
---
 gcc/config/pru/pru-protos.h |  1 +
 gcc/config/pru/pru.c        | 17 ++++++++++++++
 gcc/config/pru/pru.md       | 57 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 75 insertions(+)

diff --git a/gcc/config/pru/pru-protos.h b/gcc/config/pru/pru-protos.h
index 4c03b4a..2f7e985 100644
--- a/gcc/config/pru/pru-protos.h
+++ b/gcc/config/pru/pru-protos.h
@@ -55,6 +55,7 @@ extern int pru_get_ctable_exact_base_index (unsigned HOST_WIDE_INT caddr);
 extern int pru_get_ctable_base_index (unsigned HOST_WIDE_INT caddr);
 extern int pru_get_ctable_base_offset (unsigned HOST_WIDE_INT caddr);
 
+extern int pru_get_loop_label_id (bool is_end);
 #endif /* RTX_CODE */
 
 #endif /* GCC_PRU_PROTOS_H */
diff --git a/gcc/config/pru/pru.c b/gcc/config/pru/pru.c
index b242ee2..73fa994 100644
--- a/gcc/config/pru/pru.c
+++ b/gcc/config/pru/pru.c
@@ -76,6 +76,8 @@ struct GTY (()) machine_function
   int fp_save_offset;
   /* != 0 if frame layout already calculated.  */
   int initialized;
+  /* current doloop label index, used for marking LOOP labels */
+  int doloop_tags;
 };
 
 
@@ -1410,6 +1412,14 @@ pru_assemble_integer (rtx x, unsigned int size, int aligned_p)
     }
 }
 
+int pru_get_loop_label_id (bool is_end)
+{
+  int id = cfun->machine->doloop_tags;
+  if (!is_end)
+    cfun->machine->doloop_tags++;
+  return id;
+}
+
 
 
 /* Function argument related.  */
@@ -1797,6 +1807,13 @@ pru_set_current_function (tree fndecl)
 #undef TARGET_BUILTIN_DECL
 #define TARGET_BUILTIN_DECL pru_builtin_decl
 
+/* Prevent locally nested loops. Regarding external nesting, the RTL
+   optimizer does not use a present doloop pattern for loops containing
+   function calls or branch on table instructions.  */
+#undef TARGET_CAN_USE_DOLOOP_P
+// TODO
+//#define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost
+
 #undef TARGET_FUNCTION_OK_FOR_SIBCALL
 #define TARGET_FUNCTION_OK_FOR_SIBCALL hook_bool_tree_tree_true
 
diff --git a/gcc/config/pru/pru.md b/gcc/config/pru/pru.md
index be990be..4d83faf 100644
--- a/gcc/config/pru/pru.md
+++ b/gcc/config/pru/pru.md
@@ -53,6 +53,8 @@
 ;; Enumeration of UNSPECs
 
 (define_c_enum "unspecv" [
+  UNSPECV_LOOP_BEGIN
+  UNSPECV_LOOP_END
   UNSPECV_DELAY_CYCLES_START
   UNSPECV_DELAY_CYCLES_END
   UNSPECV_DELAY_CYCLES_2X_HI
@@ -643,6 +645,61 @@
 	  (const_int 8)))])
 
 
+;; Loop patterns
+
+; operand 0 is the loop count pseudo register
+; operand 1 is the loop end pattern
+; operand 2 is the loop end label number
+;
+; This insn is volatile because we'd like it to stay in its original
+; position, just before the loop header.
+(define_insn "doloop_begin_impl"
+  [(unspec_volatile:SI [(match_operand 0 "register_operand" "r")
+			(match_operand 1 "const_int_operand" "n")]
+		    UNSPECV_LOOP_BEGIN)]
+  ""
+  "loop .L_LOOP_%1, %x0 # LOOP_BEGIN"
+  [(set_attr "length" "4")]
+)
+
+(define_expand "doloop_begin"
+  [(use (match_operand 0 "register_operand" ""))
+   (use (match_operand 1 "" ""))]
+  ""
+{
+  rtx loop_label = GEN_INT (pru_get_loop_label_id (false));
+  emit_insn (gen_doloop_begin_impl (operands[0], loop_label));
+  DONE;
+})
+
+; TODO - fix loop-doloop.c to match without modifying the register
+; TODO - perhaps do it using an expand into a volatile "registerless" insn?
+(define_insn "doloop_end_impl"
+  [
+   (set (pc) (if_then_else (ne (match_operand:SI 0 "register_operand"  "+r")
+			    (const_int 1))
+	      (label_ref (match_operand 1 "" ""))
+	      (pc)))
+  (set (match_dup 0)
+	(plus:SI (match_dup 0) (const_int -1)))
+  (unspec [(match_operand 2 "const_int_operand" "")] UNSPECV_LOOP_END)]
+  ""
+  ".L_LOOP_%2:\;# LOOP END for %x0 cycles through %l1"
+  [(set_attr "length" "1")])
+
+(define_expand "doloop_end"
+  [(use (match_operand 0 "register_operand" ""))
+   (use (label_ref (match_operand 1 "" "")))]
+  ""
+{
+  rtx loop_label = GEN_INT (pru_get_loop_label_id (true));
+  emit_jump_insn (gen_doloop_end_impl (operands[0],
+				       operands[1],
+				       loop_label));
+  DONE;
+})
+
+
 ;;  Misc. patterns
 
 (define_insn "delay_cycles_start"
-- 
2.7.0

