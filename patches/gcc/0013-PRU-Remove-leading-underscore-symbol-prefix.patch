From 10ff875c002461619d246cca3c6e7f0a666fb28f Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dimitar@dinux.eu>
Date: Tue, 27 Dec 2016 16:22:14 +0200
Subject: [PATCH 13/19] PRU: Remove leading underscore symbol prefix

Signed-off-by: Dimitar Dimitrov <dimitar@dinux.eu>
---
 gcc/config/pru/pru.c  | 27 +++++++++++++++++++++------
 gcc/config/pru/pru.h  |  6 ++----
 gcc/config/pru/pru.md | 34 +++++++++++++++++++++-------------
 3 files changed, 44 insertions(+), 23 deletions(-)

diff --git a/gcc/config/pru/pru.c b/gcc/config/pru/pru.c
index 76fb2d62f67..85643bac9a3 100644
--- a/gcc/config/pru/pru.c
+++ b/gcc/config/pru/pru.c
@@ -774,7 +774,7 @@ pru_output_ltle_signed_cbranch (rtx *operands, bool is_near)
 		       "qbbs\t.+16, %%x2, %d\n\t"   /* OP1_POS.  */
 		       "%s\t.+8, %%x2, %%x1\n\t"    /* OP1_POS_OP2_POS.  */
 		       "jmp\t.+8\n\t"		    /* jmp OUT.  */
-		       "jmp\t%%l3",		    /* BRANCH_TAKEN_LABEL.  */
+		       "jmp\t%%%%label(%%l3)",	    /* BRANCH_TAKEN_LABEL.  */
 		       sign_bit_position (op1),
 		       sign_bit_position (op2),
 		       cmp_opstr,
@@ -834,7 +834,7 @@ pru_output_gtge_signed_cbranch (rtx *operands, bool is_near)
 		       "qbbc\t.+16, %%x2, %d\n\t"   /* OP1_NEG.  */
 		       "%s\t.+8, %%x2, %%x1\n\t"    /* OP1_NEG_OP2_NEG.  */
 		       "jmp\t.+8\n\t"		    /* jmp OUT.  */
-		       "jmp\t%%l3",		    /* BRANCH_TAKEN_LABEL.  */
+		       "jmp\t%%%%label(%%l3)",	    /* BRANCH_TAKEN_LABEL.  */
 		       sign_bit_position (op1),
 		       sign_bit_position (op2),
 		       cmp_opstr,
@@ -906,7 +906,7 @@ pru_output_signed_cbranch_ubyteop2 (rtx *operands, bool is_near)
 	snprintf (buf, sizeof (buf),
 		  "qbbs\t.+12, %%x1, %d\n\t"
 		  "%s\t.+8, %%x1, %%x2\n\t"
-		  "jmp\t%%l3",
+		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos,
 		  rcmp_opstr);
     }
@@ -922,7 +922,7 @@ pru_output_signed_cbranch_ubyteop2 (rtx *operands, bool is_near)
 	snprintf (buf, sizeof (buf),
 		  "qbbs\t.+8, %%x1, %d\n\t"
 		  "%s\t.+8, %%x1, %%x2\n\t"
-		  "jmp\t%%l3",
+		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos,
 		  rcmp_opstr);
     }
@@ -954,7 +954,7 @@ pru_output_signed_cbranch_zeroop2 (rtx *operands, bool is_near)
       else
 	snprintf (buf, sizeof (buf),
 		  "qbbc\t.+8, %%x1, %d\n\t"
-		  "jmp\t%%l3",
+		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos);
     }
   else if (code == GE)
@@ -966,7 +966,7 @@ pru_output_signed_cbranch_zeroop2 (rtx *operands, bool is_near)
       else
 	snprintf (buf, sizeof (buf),
 		  "qbbs\t.+8, %%x1, %d\n\t"
-		  "jmp\t%%l3",
+		  "jmp\t%%%%label(%%l3)",
 		  regop_sign_bit_pos);
     }
   else
@@ -1475,6 +1475,18 @@ pru_assemble_integer (rtx x, unsigned int size, int aligned_p)
       return default_assemble_integer (x, size, aligned_p);
     }
 }
+
+/* Implement TARGET_ASM_FILETARGET_ASM_FILE_START_START.  */
+
+static void
+pru_file_start (void)
+{
+  default_file_start ();
+
+  /* Compiler will take care of placing %label, so there is no
+     need to confuse users with this warning.  */
+  fprintf (asm_out_file, "\t.set no_warn_regname_label\n");
+}
 
 /* Function argument related.  */
 
@@ -2355,6 +2367,9 @@ pru_set_current_function (tree fndecl)
 #undef TARGET_ASM_INTEGER
 #define TARGET_ASM_INTEGER pru_assemble_integer
 
+#undef TARGET_ASM_FILE_START
+#define TARGET_ASM_FILE_START pru_file_start
+
 #undef TARGET_INIT_BUILTINS
 #define TARGET_INIT_BUILTINS pru_init_builtins
 #undef TARGET_EXPAND_BUILTIN
diff --git a/gcc/config/pru/pru.h b/gcc/config/pru/pru.h
index 05564775fa1..bb7737ad005 100644
--- a/gcc/config/pru/pru.h
+++ b/gcc/config/pru/pru.h
@@ -51,11 +51,9 @@
 #undef  ENDFILE_SPEC
 #define ENDFILE_SPEC "-lgloss"
 
-/* We require underscore label prefix in order to prevent ambiguity
-   when a C function name matches a CPU register name.  We know that no
-   register name starts with an underscore.  */
+/* TI ABI mandates that ELF symbols do not start with any prefix.  */
 #undef USER_LABEL_PREFIX
-#define USER_LABEL_PREFIX "_"
+#define USER_LABEL_PREFIX ""
 
 #undef LOCAL_LABEL_PREFIX
 #define LOCAL_LABEL_PREFIX ".L"
diff --git a/gcc/config/pru/pru.md b/gcc/config/pru/pru.md
index 3412b46c789..b679de1ef44 100644
--- a/gcc/config/pru/pru.md
+++ b/gcc/config/pru/pru.md
@@ -493,14 +493,14 @@
 (define_insn "indirect_jump"
   [(set (pc) (match_operand:SI 0 "register_operand" "r"))]
   ""
-  "jmp\\t%0"
+  "jmp\\t%x0"
   [(set_attr "type" "control")])
 
 (define_insn "jump"
   [(set (pc)
 	(label_ref (match_operand 0 "" "")))]
   ""
-  "jmp\\t%0"
+  "jmp\\t%%label(%l0)"
   [(set_attr "type" "control")
    (set_attr "length" "4")])
 
@@ -521,20 +521,24 @@
   "")
 
 (define_insn "*call"
-  [(call (mem:SI (match_operand:SI 0 "call_operand" "ir"))
+  [(call (mem:SI (match_operand:SI 0 "call_operand" "i,r"))
 	 (match_operand 1 "" ""))
    (clobber (reg:SI RA_REGNO))]
   ""
-  "call\\t%0"
+  "@
+    call\\t%%label(%0)
+    call\\t%x0"
   [(set_attr "type" "control")])
 
 (define_insn "*call_value"
   [(set (match_operand 0 "" "")
-	(call (mem:SI (match_operand:SI 1 "call_operand" "ir"))
+	(call (mem:SI (match_operand:SI 1 "call_operand" "i,r"))
 	      (match_operand 2 "" "")))
    (clobber (reg:SI RA_REGNO))]
   ""
-  "call\\t%1"
+  "@
+    call\\t%%label(%1)
+    call\\t%x1"
   [(set_attr "type" "control")])
 
 (define_expand "sibcall"
@@ -553,20 +557,24 @@
   "")
 
 (define_insn "*sibcall"
- [(call (mem:SI (match_operand:SI 0 "call_operand" "ij"))
+ [(call (mem:SI (match_operand:SI 0 "call_operand" "i,j"))
 	(match_operand 1 "" ""))
   (return)]
   "SIBLING_CALL_P (insn)"
-  "jmp\\t%0"
+  "@
+    jmp\\t%%label(%0)
+    jmp\\t%x0"
   [(set_attr "type" "control")])
 
 (define_insn "*sibcall_value"
  [(set (match_operand 0 "register_operand" "")
-       (call (mem:SI (match_operand:SI 1 "call_operand" "ij"))
+       (call (mem:SI (match_operand:SI 1 "call_operand" "i,j"))
 	     (match_operand 2 "" "")))
   (return)]
   "SIBLING_CALL_P (insn)"
-  "jmp\\t%1"
+  "@
+    jmp\\t%%label(%1)
+    jmp\\t%x1"
   [(set_attr "type" "control")])
 
 (define_insn "*tablejump"
@@ -574,7 +582,7 @@
 	(match_operand:SI 0 "register_operand" "r"))
    (use (label_ref (match_operand 1 "" "")))]
   ""
-  "jmp\\t%0"
+  "jmp\\t%x0"
   [(set_attr "type" "control")])
 
 ;; cbranch pattern.
@@ -613,7 +621,7 @@
       if (is_near)
 	return "qb%P0\t%l3, %x1, %x2";
       else
-	return "qb%Q0\t.+8, %x1, %x2\;jmp\t%l3";
+	return "qb%Q0\t.+8, %x1, %x2\;jmp\t%%label(%l3)";
     }
 }
   [(set_attr "type" "control")
@@ -655,7 +663,7 @@
   if (is_near)
     return "<BIT_TEST:qbbx_op>\\t%l2, %x0, %x1";
   else
-    return "<BIT_TEST:qbbx_negop>\\t.+8, %x0, %x1\;jmp\\t%l2";
+    return "<BIT_TEST:qbbx_negop>\\t.+8, %x0, %x1\;jmp\\t%%label(%l2)";
 }
   [(set_attr "type" "control")
    (set (attr "length")
-- 
2.11.0

