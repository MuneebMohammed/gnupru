From 213f2571a4cf3f08cf821fa0e043cd08c4e1ed26 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dinuxbg@gmail.com>
Date: Fri, 8 Aug 2014 22:39:47 +0300
Subject: [PATCH 4/4] HACK: Workaround an load/store_multiple offset limitation

Right now the first address of a load/store_multiple cannot
have a constant integer offset. Put a temporary workaround
which forces the final address to be in a register.

Signed-off-by: Dimitar Dimitrov <dinuxbg@gmail.com>
---
 gcc/config/pru/pru.c | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/gcc/config/pru/pru.c b/gcc/config/pru/pru.c
index 548aec4..8b9e889 100644
--- a/gcc/config/pru/pru.c
+++ b/gcc/config/pru/pru.c
@@ -213,8 +213,24 @@ xbbo_next_reg_cluster (int regno_start, int *sp_offset, bool do_store)
   gcc_assert (UBYTE_INT (*sp_offset));
 
   /* ok, save this bunch */
+#if 0
   addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,
 		       gen_int_mode (*sp_offset, Pmode));
+#else
+  /* TODO - temporary until load_multiple can take memory const_int offsets! */
+  if (!*sp_offset)
+    {
+      addr = stack_pointer_rtx;
+    }
+  else
+    {
+      rtx tmp = gen_rtx_REG (Pmode, PROLOGUE_TEMP_REGNO);
+      emit_insn (gen_add3_insn (tmp,
+				       stack_pointer_rtx,
+				       gen_int_mode (*sp_offset, Pmode)));
+      addr = tmp;
+    }
+#endif
 
   if (do_store)
     insn = gen_store_multiple (gen_frame_mem (Pmode, addr),
-- 
2.1.0.rc1

