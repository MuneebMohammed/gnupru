From 0f415dd3af6231d68721534e922fc4a1da0d34e0 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dimitar@dinux.eu>
Date: Fri, 7 Oct 2016 22:51:06 +0300
Subject: [PATCH 23/23] gdb: pru: Initial dummy port

This needs a lot of work.

Signed-off-by: Dimitar Dimitrov <dimitar@dinux.eu>
---
 gdb/Makefile.in          |   5 +-
 gdb/configure.tgt        |   6 +
 gdb/features/Makefile    |   1 +
 gdb/features/pru-cpu.xml |  43 +++
 gdb/features/pru.c       |  53 +++
 gdb/features/pru.xml     |  12 +
 gdb/pru-tdep.c           | 867 +++++++++++++++++++++++++++++++++++++++++++++++
 gdb/pru-tdep.h           |  51 +++
 8 files changed, 1036 insertions(+), 2 deletions(-)
 create mode 100644 gdb/features/pru-cpu.xml
 create mode 100644 gdb/features/pru.c
 create mode 100644 gdb/features/pru.xml
 create mode 100644 gdb/pru-tdep.c
 create mode 100644 gdb/pru-tdep.h

diff --git a/gdb/Makefile.in b/gdb/Makefile.in
index 3876cd9..6280d20 100644
--- a/gdb/Makefile.in
+++ b/gdb/Makefile.in
@@ -692,7 +692,7 @@ ALL_TARGET_OBS = \
 	nios2-tdep.o nios2-linux-tdep.o \
 	nto-tdep.o \
 	ppc-linux-tdep.o ppcfbsd-tdep.o ppcnbsd-tdep.o ppcobsd-tdep.o  \
-	ppc-sysv-tdep.o ppc64-tdep.o rl78-tdep.o \
+	ppc-sysv-tdep.o ppc64-tdep.o pru-tdep.o rl78-tdep.o \
 	rs6000-aix-tdep.o rs6000-tdep.o solib-aix.o ppc-ravenscar-thread.o \
 	rs6000-lynx178-tdep.o \
 	rx-tdep.o \
@@ -968,7 +968,7 @@ dicos-tdep.h filesystem.h gcore.h gdb_wchar.h hppabsd-tdep.h \
 i386-darwin-tdep.h x86-nat.h linux-record.h moxie-tdep.h nios2-tdep.h \
 ft32-tdep.h nds32-tdep.h \
 osdata.h procfs.h python/py-event.h python/py-events.h python/py-stopevent.h \
-python/python-internal.h python/python.h ravenscar-thread.h record.h \
+python/python-internal.h python/python.h pru-tdep.h ravenscar-thread.h record.h \
 record-full.h solib-aix.h \
 solib-darwin.h solib-spu.h windows-nat.h xcoffread.h \
 gnulib/import/extra/snippet/arg-nonnull.h gnulib/import/extra/snippet/c++defs.h \
@@ -1733,6 +1733,7 @@ ALLDEPFILES = \
 	ppcnbsd-nat.c ppcnbsd-tdep.c \
 	ppcobsd-nat.c ppcobsd-tdep.c \
 	procfs.c \
+	pru-tdep.c \
 	ravenscar-thread.c \
 	remote-sim.c \
 	dcache.c \
diff --git a/gdb/configure.tgt b/gdb/configure.tgt
index 79473c9..e19721a 100644
--- a/gdb/configure.tgt
+++ b/gdb/configure.tgt
@@ -471,6 +471,12 @@ powerpc*-*-*)
 	gdb_sim=../sim/ppc/libsim.a
 	;;
 
+pru*-*-*)
+	# Target: TI PRU
+	gdb_target_obs="pru-tdep.o"
+	gdb_sim=../sim/pru/libsim.a
+	;;
+
 s390*-*-linux*)
 	# Target: S390 running Linux
 	gdb_target_obs="s390-linux-tdep.o solib-svr4.o linux-tdep.o \
diff --git a/gdb/features/Makefile b/gdb/features/Makefile
index 30eed5d..d4d8350 100644
--- a/gdb/features/Makefile
+++ b/gdb/features/Makefile
@@ -173,6 +173,7 @@ XMLTOC = \
 	nds32.xml \
 	nios2-linux.xml \
 	nios2.xml \
+	pru.xml \
 	rs6000/powerpc-32.xml \
 	rs6000/powerpc-32l.xml \
 	rs6000/powerpc-403.xml \
diff --git a/gdb/features/pru-cpu.xml b/gdb/features/pru-cpu.xml
new file mode 100644
index 0000000..ddfc1d2
--- /dev/null
+++ b/gdb/features/pru-cpu.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2012-2014 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.pru.cpu">
+  <reg name="r0" bitsize="32" type="uint32"/>
+  <reg name="r1" bitsize="32" type="uint32"/>
+  <reg name="sp" bitsize="32" type="uint32"/>
+  <reg name="ra" bitsize="32" type="uint32"/>
+  <reg name="fp" bitsize="32" type="uint32"/>
+  <reg name="r5" bitsize="32" type="uint32"/>
+  <reg name="r6" bitsize="32" type="uint32"/>
+  <reg name="r7" bitsize="32" type="uint32"/>
+  <reg name="r8" bitsize="32" type="uint32"/>
+  <reg name="r9" bitsize="32" type="uint32"/>
+  <reg name="r10" bitsize="32" type="uint32"/>
+  <reg name="r11" bitsize="32" type="uint32"/>
+  <reg name="r12" bitsize="32" type="uint32"/>
+  <reg name="r13" bitsize="32" type="uint32"/>
+  <reg name="r14" bitsize="32" type="uint32"/>
+  <reg name="r15" bitsize="32" type="uint32"/>
+  <reg name="r16" bitsize="32" type="uint32"/>
+  <reg name="r17" bitsize="32" type="uint32"/>
+  <reg name="r18" bitsize="32" type="uint32"/>
+  <reg name="r19" bitsize="32" type="uint32"/>
+  <reg name="r20" bitsize="32" type="uint32"/>
+  <reg name="r21" bitsize="32" type="uint32"/>
+  <reg name="r22" bitsize="32" type="uint32"/>
+  <reg name="r23" bitsize="32" type="uint32"/>
+  <reg name="r24" bitsize="32" type="uint32"/>
+  <reg name="r25" bitsize="32" type="uint32"/>
+  <reg name="r26" bitsize="32" type="data_ptr"/>
+  <reg name="r27" bitsize="32" type="data_ptr"/>
+  <reg name="r28" bitsize="32" type="data_ptr"/>
+  <reg name="r29" bitsize="32" type="code_ptr"/>
+  <reg name="r30" bitsize="32" type="uint32"/>
+  <reg name="r31" bitsize="32" type="code_ptr"/>
+  <reg name="pc" bitsize="32" type="code_ptr"/>
+</feature>
diff --git a/gdb/features/pru.c b/gdb/features/pru.c
new file mode 100644
index 0000000..fe27044
--- /dev/null
+++ b/gdb/features/pru.c
@@ -0,0 +1,53 @@
+/* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:
+  Original: pru.xml */
+
+#include "defs.h"
+#include "osabi.h"
+#include "target-descriptions.h"
+
+struct target_desc *tdesc_pru;
+static void
+initialize_tdesc_pru (void)
+{
+  struct target_desc *result = allocate_target_description ();
+  struct tdesc_feature *feature;
+
+  set_tdesc_architecture (result, bfd_scan_arch ("pru"));
+
+  feature = tdesc_create_feature (result, "org.gnu.gdb.pru.cpu");
+  tdesc_create_reg (feature, "r0", 0, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r1", 1, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "sp", 2, 1, NULL, 32, "data_ptr");
+  tdesc_create_reg (feature, "ra", 3, 1, NULL, 32, "code_ptr");
+  tdesc_create_reg (feature, "fp", 4, 1, NULL, 32, "data_ptr");
+  tdesc_create_reg (feature, "r5", 5, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r6", 6, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r7", 7, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r8", 8, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r9", 9, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r10", 10, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r11", 11, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r12", 12, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r13", 13, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r14", 14, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r15", 15, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r16", 16, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r17", 17, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r18", 18, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r19", 19, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r20", 20, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r21", 21, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r22", 22, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r23", 23, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r24", 24, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r25", 25, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r26", 26, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r27", 27, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r28", 28, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r29", 29, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r30", 30, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "r31", 31, 1, NULL, 32, "uint32");
+  tdesc_create_reg (feature, "pc", 32, 1, NULL, 32, "code_ptr");
+
+  tdesc_pru = result;
+}
diff --git a/gdb/features/pru.xml b/gdb/features/pru.xml
new file mode 100644
index 0000000..f865b67
--- /dev/null
+++ b/gdb/features/pru.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2013-2014 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>pru</architecture>
+  <xi:include href="pru-cpu.xml"/>
+</target>
diff --git a/gdb/pru-tdep.c b/gdb/pru-tdep.c
new file mode 100644
index 0000000..61bc308
--- /dev/null
+++ b/gdb/pru-tdep.c
@@ -0,0 +1,867 @@
+/* Target-machine dependent code for PRU, for GDB.
+   Copyright (C) 2014 Free Software Foundation, Inc.
+   Contributed by Dimitar Dimitrov <dimitar@dinux.eu>
+   Based on the Nios 2 port.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* TODO - work in progress! */
+#include "defs.h"
+#include "frame.h"
+#include "frame-unwind.h"
+#include "frame-base.h"
+#include "trad-frame.h"
+#include "dwarf2-frame.h"
+#include "symtab.h"
+#include "inferior.h"
+#include "gdbtypes.h"
+#include "gdbcore.h"
+#include "gdbcmd.h"
+#include "osabi.h"
+#include "target.h"
+#include "dis-asm.h"
+#include "regcache.h"
+#include "value.h"
+#include "symfile.h"
+#include "arch-utils.h"
+#include "floatformat.h"
+#include "infcall.h"
+#include "regset.h"
+#include "target-descriptions.h"
+
+#include <algorithm>
+
+/* To get entry_point_address.  */
+#include "objfiles.h"
+
+/* PRU ISA specific encodings and macros.  */
+#include "opcode/pru.h"
+
+/* PRU specific header.  */
+#include "pru-tdep.h"
+
+#include "features/pru.c"
+
+/* Control debugging information emitted in this file.  */
+
+static int pru_debug = 0;
+
+/* The following structures are used in the cache for prologue
+   analysis; see the reg_value and reg_saved tables in
+   struct pru_unwind_cache, respectively.  */
+
+/* struct reg_value is used to record that a register has the same value
+   as reg at the given offset from the start of a function.  */
+
+struct reg_value
+{
+  int reg;
+  unsigned int offset;
+};
+
+/* struct reg_saved is used to record that a register value has been saved at
+   basereg + addr, for basereg >= 0.  If basereg < 0, that indicates
+   that the register is not known to have been saved.
+   
+TODO: remove me! 
+Note that when
+   basereg == PRU_Z_REGNUM (that is, r0, which holds value 0),
+   addr is an absolute address.  */
+
+struct reg_saved
+{
+  int basereg;
+  CORE_ADDR addr;
+};
+
+struct pru_unwind_cache
+{
+  /* The frame's base, optionally used by the high-level debug info.  */
+  CORE_ADDR base;
+
+  /* The previous frame's inner most stack address.  Used as this
+     frame ID's stack_addr.  */
+  CORE_ADDR cfa;
+
+  /* The address of the first instruction in this function.  */
+  CORE_ADDR pc;
+
+  /* Which register holds the return address for the frame.  */
+  int return_regnum;
+
+  /* Table indicating what changes have been made to each register.  */
+  struct reg_value reg_value[PRU_NUM_REGS];
+
+  /* Table indicating where each register has been saved.  */
+  struct reg_saved reg_saved[PRU_NUM_REGS];
+};
+
+
+/* This array is a mapping from Dwarf-2 register numbering to GDB's.  */
+
+static int pru_dwarf2gdb_regno_map[] =
+{
+  0, 1,
+  PRU_SP_REGNUM,
+  PRU_RA_REGNUM,
+  PRU_FP_REGNUM,
+  5, 6, 7, 8,
+  9, 10, 11, 12,
+  13, 14, 15, 16,
+  17, 18, 19, 20,
+  21, 22, 23, 24,
+  25, 26, 27, 28,
+  29, 30, 31,
+  PRU_PC_REGNUM		/* 32 */
+};
+
+gdb_static_assert (ARRAY_SIZE (pru_dwarf2gdb_regno_map) == PRU_NUM_REGS);
+
+/* Implement the dwarf2_reg_to_regnum gdbarch method.  */
+
+static int
+pru_dwarf_reg_to_regnum (struct gdbarch *gdbarch, int dw_reg)
+{
+  if (dw_reg < 0 || dw_reg > PRU_NUM_REGS)
+    return -1;
+
+  return pru_dwarf2gdb_regno_map[dw_reg];
+}
+
+/* Canonical names for the PRU registers.  */
+
+static const char *const pru_reg_names[PRU_NUM_REGS] =
+{
+  "r0", "r1", "sp", "ra", "fp", "r5", "r6", "r7",
+  "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
+  "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23",
+  "r24", "r25", "r26", "r27", "r28", "r29", "r30", "r31",
+  "pc"
+};
+
+/* Implement the register_name gdbarch method.  */
+
+static const char *
+pru_register_name (struct gdbarch *gdbarch, int regno)
+{
+  /* Use mnemonic aliases for GPRs.  */
+  if (regno >= 0 && regno < PRU_NUM_REGS)
+    return pru_reg_names[regno];
+  else
+    return tdesc_register_name (gdbarch, regno);
+}
+
+/* Implement the register_type gdbarch method.  */
+
+static struct type *
+pru_register_type (struct gdbarch *gdbarch, int regno)
+{
+  /* If the XML description has register information, use that to
+     determine the register type.  */
+  if (tdesc_has_registers (gdbarch_target_desc (gdbarch)))
+    return tdesc_register_type (gdbarch, regno);
+
+  if (regno == PRU_PC_REGNUM)
+    return builtin_type (gdbarch)->builtin_func_ptr;
+  else if (regno == PRU_SP_REGNUM)
+    return builtin_type (gdbarch)->builtin_data_ptr;
+  else
+    return builtin_type (gdbarch)->builtin_uint32;
+}
+
+/* Given a return value in REGCACHE with a type VALTYPE,
+   extract and copy its value into VALBUF.  */
+
+static void
+pru_extract_return_value (struct gdbarch *gdbarch, struct type *valtype,
+			    struct regcache *regcache, gdb_byte *valbuf)
+{
+  int len = TYPE_LENGTH (valtype);
+
+  /* Return values of up to 8 bytes are returned in $r14 $r15.  */
+  if (len <= register_size (gdbarch, PRU_R14_REGNUM))
+    regcache_cooked_read (regcache, PRU_R14_REGNUM, valbuf);
+  else
+    {
+      gdb_assert (len <= (register_size (gdbarch, PRU_R14_REGNUM)
+			  + register_size (gdbarch, PRU_R15_REGNUM)));
+      regcache_cooked_read (regcache, PRU_R14_REGNUM, valbuf);
+      regcache_cooked_read (regcache, PRU_R15_REGNUM, valbuf + 4);
+    }
+}
+
+/* Write into appropriate registers a function return value
+   of type TYPE, given in virtual format.  */
+
+static void
+pru_store_return_value (struct gdbarch *gdbarch, struct type *valtype,
+			  struct regcache *regcache, const gdb_byte *valbuf)
+{
+  int len = TYPE_LENGTH (valtype);
+
+  /* Return values of up to 8 bytes are returned in $r14 $r15.  */
+  if (len <= register_size (gdbarch, PRU_R14_REGNUM))
+    regcache_cooked_write (regcache, PRU_R14_REGNUM, valbuf);
+  else
+    {
+      gdb_assert (len <= (register_size (gdbarch, PRU_R14_REGNUM)
+			  + register_size (gdbarch, PRU_R15_REGNUM)));
+      regcache_cooked_write (regcache, PRU_R14_REGNUM, valbuf);
+      regcache_cooked_write (regcache, PRU_R15_REGNUM, valbuf + 4);
+    }
+}
+
+
+/* Set up the default values of the registers.  */
+
+static void
+pru_setup_default (struct pru_unwind_cache *cache)
+{
+  int i;
+
+  for (i = 0; i < PRU_NUM_REGS; i++)
+  {
+    /* All registers start off holding their previous values.  */
+    cache->reg_value[i].reg    = i;
+    cache->reg_value[i].offset = 0;
+
+    /* All registers start off not saved.  */
+    cache->reg_saved[i].basereg = -1;
+    cache->reg_saved[i].addr    = 0;
+  }
+}
+
+/* Initialize the unwind cache.  */
+
+static void
+pru_init_cache (struct pru_unwind_cache *cache, CORE_ADDR pc)
+{
+  cache->base = 0;
+  cache->cfa = 0;
+  cache->pc = pc;
+  cache->return_regnum = PRU_RA_REGNUM;
+  pru_setup_default (cache);
+}
+
+/* Helper function to identify when we're in a function epilogue;
+   that is, the part of the function from the point at which the
+   stack adjustment is made, to the return or sibcall.  On PRU,
+   we want to check that the CURRENT_PC is a return-type instruction
+   and that the previous instruction is a stack adjustment.
+   START_PC is the beginning of the function in question.  */
+
+static int
+pru_in_epilogue_p (struct gdbarch *gdbarch,
+		     CORE_ADDR current_pc,
+		     CORE_ADDR start_pc)
+{
+#if 0
+  TODO
+  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
+
+  /* There has to be a previous instruction in the function.  */
+  if (current_pc > start_pc)
+    {
+
+      /* Check whether the previous instruction was a stack
+	 adjustment.  */
+      unsigned int insn
+        = read_memory_unsigned_integer (current_pc - PRU_OPCODE_SIZE,
+					PRU_OPCODE_SIZE, byte_order);
+
+      if ((insn & 0xffc0003c) == 0xdec00004	/* ADDI sp, sp, */
+	  || (insn & 0xffc1ffff) == 0xdec1883a	/* ADD  sp, sp, */
+	  || (insn & 0xffc0003f) == 0xdec00017)	/* LDW  sp, constant(sp) */
+	{
+	  /* Then check if it's followed by a return or a tail
+	     call.  */
+          insn = read_memory_unsigned_integer (current_pc, PRU_OPCODE_SIZE,
+					       byte_order);
+
+	  if (insn == 0xf800283a			/* RET */
+	      || insn == 0xe800083a			/* ERET */
+	      || (insn & 0x07ffffff) == 0x0000683a	/* JMP */
+	      || (insn & 0xffc0003f) == 6)		/* BR */
+	    return 1;
+	}
+    }
+#endif
+  return 0;
+}
+
+/* Implement the stack_frame_destroyed_p gdbarch method.  */
+
+static int
+pru_stack_frame_destroyed_p (struct gdbarch *gdbarch, CORE_ADDR pc)
+{
+  CORE_ADDR func_addr;
+
+  if (find_pc_partial_function (pc, NULL, &func_addr, NULL))
+    return pru_in_epilogue_p (gdbarch, pc, func_addr);
+
+  return 0;
+}
+
+/* Do prologue analysis, returning the PC of the first instruction
+   after the function prologue. */
+
+static CORE_ADDR
+pru_analyze_prologue (struct gdbarch *gdbarch, const CORE_ADDR start_pc,
+			const CORE_ADDR current_pc,
+			struct pru_unwind_cache *cache,
+			struct frame_info *this_frame)
+{
+  /* TODO - fill me in */
+  return start_pc;
+}
+
+/* Implement the skip_prologue gdbarch hook.  */
+
+static CORE_ADDR
+pru_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR start_pc)
+{
+  CORE_ADDR limit_pc;
+  CORE_ADDR func_addr;
+
+  struct pru_unwind_cache cache;
+
+  /* See if we can determine the end of the prologue via the symbol
+     table.  If so, then return either PC, or the PC after the
+     prologue, whichever is greater.  */
+  if (find_pc_partial_function (start_pc, NULL, &func_addr, NULL))
+    {
+      CORE_ADDR post_prologue_pc
+        = skip_prologue_using_sal (gdbarch, func_addr);
+
+      if (post_prologue_pc != 0)
+        return std::max (start_pc, post_prologue_pc);
+    }
+
+  /* Prologue analysis does the rest....  */
+  pru_init_cache (&cache, start_pc);
+  return pru_analyze_prologue (gdbarch, start_pc, start_pc, &cache, NULL);
+}
+
+/* Implement the breakpoint_from_pc gdbarch hook.  */
+
+static const gdb_byte*
+pru_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR *bp_addr,
+			  int *bp_size)
+{
+  /* Due to lack of a decicated breakpoint instruction, we hijack 
+     the 'SLP 0' instruction. Especially with simulation, it is
+     equivalent to a 'HALT', which we already use for RPMSG I/O. */
+  static const gdb_byte breakpoint_le[] = {0x00, 0x00, 0x00, 0x3e};
+
+  *bp_size = 4;
+  return breakpoint_le;
+}
+
+/* Implement the print_insn gdbarch method.  */
+
+static int
+pru_print_insn (bfd_vma memaddr, disassemble_info *info)
+{
+  return print_insn_pru (memaddr, info);
+}
+
+
+/* Implement the frame_align gdbarch method.  */
+
+static CORE_ADDR
+pru_frame_align (struct gdbarch *gdbarch, CORE_ADDR addr)
+{
+  return align_down (addr, 4);
+}
+
+
+/* Implement the return_value gdbarch method.  */
+
+static enum return_value_convention
+pru_return_value (struct gdbarch *gdbarch, struct value *function,
+		    struct type *type, struct regcache *regcache,
+		    gdb_byte *readbuf, const gdb_byte *writebuf)
+{
+  if (TYPE_LENGTH (type) > 8)
+    return RETURN_VALUE_STRUCT_CONVENTION;
+
+  if (readbuf)
+    pru_extract_return_value (gdbarch, type, regcache, readbuf);
+  if (writebuf)
+    pru_store_return_value (gdbarch, type, regcache, writebuf);
+
+  return RETURN_VALUE_REGISTER_CONVENTION;
+}
+
+/* Implement the dummy_id gdbarch method.  */
+
+static struct frame_id
+pru_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)
+{
+  return frame_id_build
+    (get_frame_register_unsigned (this_frame, PRU_SP_REGNUM),
+     get_frame_pc (this_frame));
+}
+
+/* Implement the push_dummy_call gdbarch method.  */
+
+static CORE_ADDR
+pru_push_dummy_call (struct gdbarch *gdbarch, struct value *function,
+                       struct regcache *regcache, CORE_ADDR bp_addr,
+                       int nargs, struct value **args, CORE_ADDR sp,
+                       int struct_return, CORE_ADDR struct_addr)
+{
+  int argreg;
+  int float_argreg;
+  int argnum;
+  int len = 0;
+  int stack_offset = 0;
+  CORE_ADDR func_addr = find_function_addr (function, NULL);
+  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
+
+  /* Set the return address register to point to the entry point of
+     the program, where a breakpoint lies in wait.  */
+  regcache_cooked_write_signed (regcache, PRU_RA_REGNUM, bp_addr);
+
+  /* Now make space on the stack for the args.  */
+  for (argnum = 0; argnum < nargs; argnum++)
+    len += align_up (TYPE_LENGTH (value_type (args[argnum])), 4);
+  sp -= len;
+
+  /* Initialize the register pointer.  */
+  argreg = PRU_FIRST_ARGREG;
+
+  /* The struct_return pointer occupies the first parameter-passing
+     register.  */
+  if (struct_return)
+    regcache_cooked_write_unsigned (regcache, argreg++, struct_addr);
+
+  /* Now load as many as possible of the first arguments into
+     registers, and push the rest onto the stack.  Loop through args
+     from first to last.  */
+  for (argnum = 0; argnum < nargs; argnum++)
+    {
+      const gdb_byte *val;
+      struct value *arg = args[argnum];
+      struct type *arg_type = check_typedef (value_type (arg));
+      int len = TYPE_LENGTH (arg_type);
+
+      val = value_contents (arg);
+
+      /* Copy the argument to general registers or the stack in
+         register-sized pieces.  Large arguments are split between
+         registers and stack.  */
+      while (len > 0)
+        {
+	  int partial_len = (len < 4 ? len : 4);
+
+	  if (argreg <= PRU_LAST_ARGREG)
+	    {
+	      /* The argument is being passed in a register.  */
+	      CORE_ADDR regval = extract_unsigned_integer (val, partial_len,
+							   byte_order);
+
+	      regcache_cooked_write_unsigned (regcache, argreg, regval);
+	      argreg++;
+	    }
+	  else
+	    {
+	      /* The argument is being passed on the stack.  */
+	      CORE_ADDR addr = sp + stack_offset;
+
+	      write_memory (addr, val, partial_len);
+	      stack_offset += align_up (partial_len, 4);
+	    }
+
+	  len -= partial_len;
+	  val += partial_len;
+	}
+    }
+
+  regcache_cooked_write_signed (regcache, PRU_SP_REGNUM, sp);
+
+  /* Return adjusted stack pointer.  */
+  return sp;
+}
+
+/* Implement the unwind_pc gdbarch method.  */
+
+static CORE_ADDR
+pru_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
+{
+  gdb_byte buf[4];
+
+  frame_unwind_register (next_frame, PRU_PC_REGNUM, buf);
+  return extract_typed_address (buf, builtin_type (gdbarch)->builtin_func_ptr);
+}
+
+/* Implement the unwind_sp gdbarch method.  */
+
+static CORE_ADDR
+pru_unwind_sp (struct gdbarch *gdbarch, struct frame_info *this_frame)
+{
+  return frame_unwind_register_unsigned (this_frame, PRU_SP_REGNUM);
+}
+
+/* Use prologue analysis to fill in the register cache
+   *THIS_PROLOGUE_CACHE for THIS_FRAME.  This function initializes
+   *THIS_PROLOGUE_CACHE first.  */
+
+static struct pru_unwind_cache *
+pru_frame_unwind_cache (struct frame_info *this_frame,
+			  void **this_prologue_cache)
+{
+  struct gdbarch *gdbarch = get_frame_arch (this_frame);
+  CORE_ADDR current_pc;
+  struct pru_unwind_cache *cache;
+  int i;
+
+  if (*this_prologue_cache)
+    return (struct pru_unwind_cache *) *this_prologue_cache;
+
+  cache = FRAME_OBSTACK_ZALLOC (struct pru_unwind_cache);
+  *this_prologue_cache = cache;
+
+  /* Zero all fields.  */
+  pru_init_cache (cache, get_frame_func (this_frame));
+
+  /* Prologue analysis does the rest...  */
+  current_pc = get_frame_pc (this_frame);
+  if (cache->pc != 0)
+    pru_analyze_prologue (gdbarch, cache->pc, current_pc, cache, this_frame);
+
+  return cache;
+}
+
+/* Implement the this_id function for the normal unwinder.  */
+
+static void
+pru_frame_this_id (struct frame_info *this_frame, void **this_cache,
+		     struct frame_id *this_id)
+{
+  struct pru_unwind_cache *cache =
+    pru_frame_unwind_cache (this_frame, this_cache);
+
+  /* This marks the outermost frame.  */
+  if (cache->base == 0)
+    return;
+
+  *this_id = frame_id_build (cache->cfa, cache->pc);
+}
+
+/* Implement the prev_register function for the normal unwinder.  */
+
+static struct value *
+pru_frame_prev_register (struct frame_info *this_frame, void **this_cache,
+			   int regnum)
+{
+  struct pru_unwind_cache *cache =
+    pru_frame_unwind_cache (this_frame, this_cache);
+
+  gdb_assert (regnum >= 0 && regnum < PRU_NUM_REGS);
+
+  /* The PC of the previous frame is stored in the RA register of
+     the current frame.  Frob regnum so that we pull the value from
+     the correct place.  */
+  if (regnum == PRU_PC_REGNUM)
+    regnum = cache->return_regnum;
+
+  if (regnum == PRU_SP_REGNUM && cache->cfa)
+    return frame_unwind_got_constant (this_frame, regnum, cache->cfa);
+
+#if 0
+  TODO
+  /* If we've worked out where a register is stored then load it from
+     there.  */
+  if (cache->reg_saved[regnum].basereg == PRU_Z_REGNUM)
+    return frame_unwind_got_memory (this_frame, regnum,
+				    cache->reg_saved[regnum].addr);
+#endif
+
+  return frame_unwind_got_register (this_frame, regnum, regnum);
+}
+
+/* Implement the this_base, this_locals, and this_args hooks
+   for the normal unwinder.  */
+
+static CORE_ADDR
+pru_frame_base_address (struct frame_info *this_frame, void **this_cache)
+{
+  struct pru_unwind_cache *info
+    = pru_frame_unwind_cache (this_frame, this_cache);
+
+  return info->base;
+}
+
+/* Data structures for the normal prologue-analysis-based
+   unwinder.  */
+
+static const struct frame_unwind pru_frame_unwind =
+{
+  NORMAL_FRAME,
+  default_frame_unwind_stop_reason,
+  pru_frame_this_id,
+  pru_frame_prev_register,
+  NULL,
+  default_frame_sniffer
+};
+
+static const struct frame_base pru_frame_base =
+{
+  &pru_frame_unwind,
+  pru_frame_base_address,
+  pru_frame_base_address,
+  pru_frame_base_address
+};
+
+/* Fill in the register cache *THIS_CACHE for THIS_FRAME for use
+   in the stub unwinder.  */
+
+static struct trad_frame_cache *
+pru_stub_frame_cache (struct frame_info *this_frame, void **this_cache)
+{
+  CORE_ADDR pc;
+  CORE_ADDR start_addr;
+  CORE_ADDR stack_addr;
+  struct trad_frame_cache *this_trad_cache;
+  struct gdbarch *gdbarch = get_frame_arch (this_frame);
+
+  if (*this_cache != NULL)
+    return (struct trad_frame_cache *) *this_cache;
+  this_trad_cache = trad_frame_cache_zalloc (this_frame);
+  *this_cache = this_trad_cache;
+
+  /* The return address is in the link register.  */
+  trad_frame_set_reg_realreg (this_trad_cache,
+                              gdbarch_pc_regnum (gdbarch),
+                              PRU_RA_REGNUM);
+
+  /* Frame ID, since it's a frameless / stackless function, no stack
+     space is allocated and SP on entry is the current SP.  */
+  pc = get_frame_pc (this_frame);
+  find_pc_partial_function (pc, NULL, &start_addr, NULL);
+  stack_addr = get_frame_register_unsigned (this_frame, PRU_SP_REGNUM);
+  trad_frame_set_id (this_trad_cache, frame_id_build (start_addr, stack_addr));
+  /* Assume that the frame's base is the same as the stack pointer.  */
+  trad_frame_set_this_base (this_trad_cache, stack_addr);
+
+  return this_trad_cache;
+}
+
+/* Implement the this_id function for the stub unwinder.  */
+
+static void
+pru_stub_frame_this_id (struct frame_info *this_frame, void **this_cache,
+                          struct frame_id *this_id)
+{
+  struct trad_frame_cache *this_trad_cache
+    = pru_stub_frame_cache (this_frame, this_cache);
+
+  trad_frame_get_id (this_trad_cache, this_id);
+}
+
+/* Implement the prev_register function for the stub unwinder.  */
+
+static struct value *
+pru_stub_frame_prev_register (struct frame_info *this_frame,
+			        void **this_cache, int regnum)
+{
+  struct trad_frame_cache *this_trad_cache
+    = pru_stub_frame_cache (this_frame, this_cache);
+
+  return trad_frame_get_register (this_trad_cache, this_frame, regnum);
+}
+
+/* Implement the sniffer function for the stub unwinder.
+   This unwinder is used for cases where the normal
+   prologue-analysis-based unwinder can't work,
+   such as PLT stubs.  */
+
+static int
+pru_stub_frame_sniffer (const struct frame_unwind *self,
+			  struct frame_info *this_frame, void **cache)
+{
+  gdb_byte dummy[4];
+  CORE_ADDR pc = get_frame_address_in_block (this_frame);
+
+  /* Use the stub unwinder for unreadable code.  */
+  if (target_read_memory (get_frame_pc (this_frame), dummy, 4) != 0)
+    return 1;
+
+  if (in_plt_section (pc))
+    return 1;
+
+  return 0;
+}
+
+/* Define the data structures for the stub unwinder.  */
+
+static const struct frame_unwind pru_stub_frame_unwind =
+{
+  NORMAL_FRAME,
+  default_frame_unwind_stop_reason,
+  pru_stub_frame_this_id,
+  pru_stub_frame_prev_register,
+  NULL,
+  pru_stub_frame_sniffer
+};
+
+/* Implement the software_single_step gdbarch method.  */
+
+static VEC (CORE_ADDR) *
+pru_software_single_step (struct frame_info *frame)
+{
+  struct gdbarch *gdbarch = get_frame_arch (frame);
+  CORE_ADDR next_pc = get_frame_pc (frame) + PRU_OPCODE_SIZE;
+  VEC (CORE_ADDR) *next_pcs = NULL;
+
+  VEC_safe_push (CORE_ADDR, next_pcs, next_pc);
+
+  return next_pcs;
+}
+
+/* Initialize the PRU gdbarch.  */
+
+static struct gdbarch *
+pru_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  struct gdbarch *gdbarch;
+  struct gdbarch_tdep *tdep;
+  int i;
+  struct tdesc_arch_data *tdesc_data = NULL;
+  const struct target_desc *tdesc = info.target_desc;
+
+  if (!tdesc_has_registers (tdesc))
+    /* Pick a default target description.  */
+    tdesc = tdesc_pru;
+
+  /* Check any target description for validity.  */
+  if (tdesc_has_registers (tdesc))
+    {
+      const struct tdesc_feature *feature;
+      int valid_p;
+
+      feature = tdesc_find_feature (tdesc, "org.gnu.gdb.pru.cpu");
+      if (feature == NULL)
+	return NULL;
+
+      tdesc_data = tdesc_data_alloc ();
+
+      valid_p = 1;
+      
+      for (i = 0; i < PRU_NUM_REGS; i++)
+	valid_p &= tdesc_numbered_register (feature, tdesc_data, i,
+					    pru_reg_names[i]);
+
+      if (!valid_p)
+	{
+	  tdesc_data_cleanup (tdesc_data);
+	  return NULL;
+	}
+    }
+
+  /* Find a candidate among the list of pre-declared architectures.  */
+  arches = gdbarch_list_lookup_by_info (arches, &info);
+  if (arches != NULL)
+    return arches->gdbarch;
+
+  /* None found, create a new architecture from the information
+     provided.  */
+  tdep = XNEW (struct gdbarch_tdep);
+  gdbarch = gdbarch_alloc (&info, tdep);
+
+  /* Data type sizes.  */
+  set_gdbarch_ptr_bit (gdbarch, 32);
+  set_gdbarch_addr_bit (gdbarch, 32);
+  set_gdbarch_short_bit (gdbarch, 16);
+  set_gdbarch_int_bit (gdbarch, 32);
+  set_gdbarch_long_bit (gdbarch, 32);
+  set_gdbarch_long_long_bit (gdbarch, 64);
+  set_gdbarch_float_bit (gdbarch, 32);
+  set_gdbarch_double_bit (gdbarch, 64);
+
+  set_gdbarch_float_format (gdbarch, floatformats_ieee_single);
+  set_gdbarch_double_format (gdbarch, floatformats_ieee_double);
+
+  /* The register set.  */
+  set_gdbarch_num_regs (gdbarch, PRU_NUM_REGS);
+  set_gdbarch_sp_regnum (gdbarch, PRU_SP_REGNUM);
+  set_gdbarch_pc_regnum (gdbarch, PRU_PC_REGNUM);	/* Pseudo register PC */
+
+  set_gdbarch_register_name (gdbarch, pru_register_name);
+  set_gdbarch_register_type (gdbarch, pru_register_type);
+
+  /* Provide register mappings for stabs and dwarf2.  */
+  set_gdbarch_stab_reg_to_regnum (gdbarch, pru_dwarf_reg_to_regnum);
+  set_gdbarch_dwarf2_reg_to_regnum (gdbarch, pru_dwarf_reg_to_regnum);
+
+  set_gdbarch_inner_than (gdbarch, core_addr_lessthan);
+
+  /* Call dummy code.  */
+  set_gdbarch_frame_align (gdbarch, pru_frame_align);
+
+  set_gdbarch_return_value (gdbarch, pru_return_value);
+
+  set_gdbarch_skip_prologue (gdbarch, pru_skip_prologue);
+  set_gdbarch_stack_frame_destroyed_p (gdbarch, pru_stack_frame_destroyed_p);
+  set_gdbarch_breakpoint_from_pc (gdbarch, pru_breakpoint_from_pc);
+
+  set_gdbarch_dummy_id (gdbarch, pru_dummy_id);
+  set_gdbarch_unwind_pc (gdbarch, pru_unwind_pc);
+  set_gdbarch_unwind_sp (gdbarch, pru_unwind_sp);
+
+  /* The dwarf2 unwinder will normally produce the best results if
+     the debug information is available, so register it first.  */
+  dwarf2_append_unwinders (gdbarch);
+  frame_unwind_append_unwinder (gdbarch, &pru_stub_frame_unwind);
+  frame_unwind_append_unwinder (gdbarch, &pru_frame_unwind);
+
+  /* Single stepping.  */
+  set_gdbarch_software_single_step (gdbarch, pru_software_single_step);
+
+  /* Hook in ABI-specific overrides, if they have been registered.  */
+  gdbarch_init_osabi (info, gdbarch);
+
+  frame_base_set_default (gdbarch, &pru_frame_base);
+
+  set_gdbarch_print_insn (gdbarch, pru_print_insn);
+
+  /* Enable inferior call support.  */
+  set_gdbarch_push_dummy_call (gdbarch, pru_push_dummy_call);
+
+  if (tdesc_data)
+    tdesc_use_registers (gdbarch, tdesc, tdesc_data);
+
+  return gdbarch;
+}
+
+extern initialize_file_ftype _initialize_pru_tdep; /* -Wmissing-prototypes */
+
+void
+_initialize_pru_tdep (void)
+{
+  gdbarch_register (bfd_arch_pru, pru_gdbarch_init, NULL);
+  initialize_tdesc_pru ();
+
+  /* Allow debugging this file's internals.  */
+  add_setshow_boolean_cmd ("pru", class_maintenance, &pru_debug,
+			   _("Set PRU debugging."),
+			   _("Show PRU debugging."),
+			   _("When on, PRU specific debugging is enabled."),
+			   NULL,
+			   NULL,
+			   &setdebuglist, &showdebuglist);
+}
diff --git a/gdb/pru-tdep.h b/gdb/pru-tdep.h
new file mode 100644
index 0000000..6d08981
--- /dev/null
+++ b/gdb/pru-tdep.h
@@ -0,0 +1,51 @@
+/* Target-dependent header for the TI PRU architecture, for GDB.
+   Copyright (C) 2014 Free Software Foundation, Inc.
+   Contributed by Dimitar Dimitrov <dimitar@dinux.eu>
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#ifndef PRU_TDEP_H
+#define PRU_TDEP_H
+
+/* Registers.  */
+#define PRU_SP_REGNUM 2   /* Stack Pointer */
+#define PRU_RA_REGNUM 3  /* Return address */
+#define PRU_FP_REGNUM 4  /* Frame Pointer */
+#define PRU_R14_REGNUM 14
+#define PRU_R15_REGNUM 15
+#define PRU_PC_REGNUM 32
+
+/* R4-R7 are used for argument passing.  */
+#define PRU_FIRST_ARGREG  14
+#define PRU_LAST_ARGREG	  29
+
+/* Number of all registers.  */
+#define PRU_NUM_REGS 33
+
+/* Size of an instruction, in bytes.  */
+#define PRU_OPCODE_SIZE 4
+
+/* Target-dependent structure in gdbarch.  */
+struct gdbarch_tdep
+{
+  /* Assumes FRAME is stopped at a syscall (trap) instruction; returns
+     the expected next PC.  */
+  CORE_ADDR (*syscall_next_pc) (struct frame_info *frame);
+};
+
+extern struct target_desc *tdesc_pru;
+
+#endif /* PRU_TDEP_H */
-- 
2.10.2

