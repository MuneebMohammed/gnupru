From 42b37217c3e00c82be3062de511e75d49d6f78f9 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dimitar@dinux.eu>
Date: Sat, 24 Feb 2018 09:22:16 +0200
Subject: [PATCH 12/12] gas: pru: Add range checks for constant operands

In case of constant integer operands, only GAS can catch range overflow.

Signed-off-by: Dimitar Dimitrov <dimitar@dinux.eu>
---
 gas/config/tc-pru.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/gas/config/tc-pru.c b/gas/config/tc-pru.c
index 91edf14557..5a109d1160 100644
--- a/gas/config/tc-pru.c
+++ b/gas/config/tc-pru.c
@@ -1089,6 +1089,8 @@ pru_assemble_arg_b (pru_insn_infoS *insn_info, const char *argstr)
   if (src2 == NULL)
     {
       unsigned long imm8 = pru_assemble_noreloc_expression (argstr);
+      if (imm8 >= 0x100)
+	as_bad (_("value %lu is too large for a byte operand"), imm8);
       SET_INSN_FIELD (IMM8, insn_info->insn_code, imm8);
       SET_INSN_FIELD (IO, insn_info->insn_code, 1);
     }
@@ -1177,6 +1179,8 @@ pru_assemble_arg_W (pru_insn_infoS *insn_info, const char *argstr)
   unsigned long imm16 = pru_assemble_expression (argstr, insn_info,
 						 insn_info->insn_reloc,
 						 BFD_RELOC_PRU_U16, 0);
+  if (imm16 >= 0x10000)
+    as_bad (_("value %lu is too large for a word operand"), imm16);
   /* QUIRK: LDI must clear IO bit high, even though it has immediate arg.  */
   SET_INSN_FIELD (IO, insn_info->insn_code, 0);
   SET_INSN_FIELD (IMM16, insn_info->insn_code, imm16);
-- 
2.11.0

